
WatRooms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003504  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080036a4  080036a4  000046a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800375c  0800375c  00005078  2**0
                  CONTENTS
  4 .ARM          00000008  0800375c  0800375c  0000475c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003764  08003764  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003764  08003764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003768  08003768  00004768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800376c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000078  080037e4  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080037e4  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073de  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166a  00000000  00000000  0000c486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fe  00000000  00000000  0000e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016245  00000000  00000000  0000e8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009996  00000000  00000000  00024b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c45  00000000  00000000  0002e4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b50ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000276c  00000000  00000000  000b5134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b78a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800368c 	.word	0x0800368c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800368c 	.word	0x0800368c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d013      	beq.n	80005b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800058c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000590:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	e000      	b.n	800059c <ITM_SendChar+0x2c>
    {
      __NOP();
 800059a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <setupKeypad>:
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

void setupKeypad() {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

    // Configure rows as input with pull-up
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d8:	2301      	movs	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 4; i++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	e00c      	b.n	80005fc <setupKeypad+0x3c>
        GPIO_InitStruct.Pin = KEYPAD_ROWS[i];
 80005e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000650 <setupKeypad+0x90>)
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ea:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(KEYPAD_ROW_PORT, &GPIO_InitStruct);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4619      	mov	r1, r3
 80005f0:	4818      	ldr	r0, [pc, #96]	@ (8000654 <setupKeypad+0x94>)
 80005f2:	f000 fe35 	bl	8001260 <HAL_GPIO_Init>
    for (int i = 0; i < 4; i++) {
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3301      	adds	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	ddef      	ble.n	80005e2 <setupKeypad+0x22>
    }

    // Configure columns as output
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 4; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	e015      	b.n	8000640 <setupKeypad+0x80>
        GPIO_InitStruct.Pin = KEYPAD_COLS[i];
 8000614:	4a10      	ldr	r2, [pc, #64]	@ (8000658 <setupKeypad+0x98>)
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061c:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(KEYPAD_COL_PORT, &GPIO_InitStruct);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	480c      	ldr	r0, [pc, #48]	@ (8000654 <setupKeypad+0x94>)
 8000624:	f000 fe1c 	bl	8001260 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(KEYPAD_COL_PORT, KEYPAD_COLS[i], GPIO_PIN_SET);
 8000628:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <setupKeypad+0x98>)
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	4807      	ldr	r0, [pc, #28]	@ (8000654 <setupKeypad+0x94>)
 8000636:	f000 ffaf 	bl	8001598 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	3301      	adds	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	2b03      	cmp	r3, #3
 8000644:	dde6      	ble.n	8000614 <setupKeypad+0x54>
    }
}
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08003700 	.word	0x08003700
 8000654:	40020000 	.word	0x40020000
 8000658:	08003708 	.word	0x08003708

0800065c <scanKeypad>:

char scanKeypad() {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
    for (int col = 0; col < 4; col++) {
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	e04d      	b.n	8000704 <scanKeypad+0xa8>
        HAL_GPIO_WritePin(KEYPAD_COL_PORT, KEYPAD_COLS[col], GPIO_PIN_RESET); // Set column low
 8000668:	4a2a      	ldr	r2, [pc, #168]	@ (8000714 <scanKeypad+0xb8>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000670:	2200      	movs	r2, #0
 8000672:	4619      	mov	r1, r3
 8000674:	4828      	ldr	r0, [pc, #160]	@ (8000718 <scanKeypad+0xbc>)
 8000676:	f000 ff8f 	bl	8001598 <HAL_GPIO_WritePin>
        for (int row = 0; row < 4; row++) {
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	e032      	b.n	80006e6 <scanKeypad+0x8a>
            if (HAL_GPIO_ReadPin(KEYPAD_ROW_PORT, KEYPAD_ROWS[row]) == GPIO_PIN_RESET) {
 8000680:	4a26      	ldr	r2, [pc, #152]	@ (800071c <scanKeypad+0xc0>)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000688:	4619      	mov	r1, r3
 800068a:	4823      	ldr	r0, [pc, #140]	@ (8000718 <scanKeypad+0xbc>)
 800068c:	f000 ff6c 	bl	8001568 <HAL_GPIO_ReadPin>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d124      	bne.n	80006e0 <scanKeypad+0x84>
                HAL_Delay(50); // Debounce delay
 8000696:	2032      	movs	r0, #50	@ 0x32
 8000698:	f000 fcd8 	bl	800104c <HAL_Delay>
                while (HAL_GPIO_ReadPin(KEYPAD_ROW_PORT, KEYPAD_ROWS[row]) == GPIO_PIN_RESET); // Wait for release
 800069c:	bf00      	nop
 800069e:	4a1f      	ldr	r2, [pc, #124]	@ (800071c <scanKeypad+0xc0>)
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a6:	4619      	mov	r1, r3
 80006a8:	481b      	ldr	r0, [pc, #108]	@ (8000718 <scanKeypad+0xbc>)
 80006aa:	f000 ff5d 	bl	8001568 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d0f4      	beq.n	800069e <scanKeypad+0x42>
                HAL_GPIO_WritePin(KEYPAD_COL_PORT, KEYPAD_COLS[col], GPIO_PIN_SET); // Reset column high
 80006b4:	4a17      	ldr	r2, [pc, #92]	@ (8000714 <scanKeypad+0xb8>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006bc:	2201      	movs	r2, #1
 80006be:	4619      	mov	r1, r3
 80006c0:	4815      	ldr	r0, [pc, #84]	@ (8000718 <scanKeypad+0xbc>)
 80006c2:	f000 ff69 	bl	8001598 <HAL_GPIO_WritePin>

                // Debugging: Print which row and column were detected
                printf("Row: %d, Column: %d\n", row, col);
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	6839      	ldr	r1, [r7, #0]
 80006ca:	4815      	ldr	r0, [pc, #84]	@ (8000720 <scanKeypad+0xc4>)
 80006cc:	f002 f962 	bl	8002994 <iprintf>
                return keypad[row][col];
 80006d0:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <scanKeypad+0xc8>)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	441a      	add	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	e015      	b.n	800070c <scanKeypad+0xb0>
        for (int row = 0; row < 4; row++) {
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	ddc9      	ble.n	8000680 <scanKeypad+0x24>
            }
        }
        HAL_GPIO_WritePin(KEYPAD_COL_PORT, KEYPAD_COLS[col], GPIO_PIN_SET); // Reset column high
 80006ec:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <scanKeypad+0xb8>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	4807      	ldr	r0, [pc, #28]	@ (8000718 <scanKeypad+0xbc>)
 80006fa:	f000 ff4d 	bl	8001598 <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3301      	adds	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b03      	cmp	r3, #3
 8000708:	ddae      	ble.n	8000668 <scanKeypad+0xc>
    }
    return '\0';
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	08003708 	.word	0x08003708
 8000718:	40020000 	.word	0x40020000
 800071c:	08003700 	.word	0x08003700
 8000720:	080036a4 	.word	0x080036a4
 8000724:	20000000 	.word	0x20000000

08000728 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af02      	add	r7, sp, #8
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f023 030f 	bic.w	r3, r3, #15
 8000738:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	f043 030c 	orr.w	r3, r3, #12
 8000746:	b2db      	uxtb	r3, r3
 8000748:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	b2db      	uxtb	r3, r3
 8000752:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000754:	7bbb      	ldrb	r3, [r7, #14]
 8000756:	f043 030c 	orr.w	r3, r3, #12
 800075a:	b2db      	uxtb	r3, r3
 800075c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800075e:	7bbb      	ldrb	r3, [r7, #14]
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	b2db      	uxtb	r3, r3
 8000766:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000768:	f107 0208 	add.w	r2, r7, #8
 800076c:	2364      	movs	r3, #100	@ 0x64
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2304      	movs	r3, #4
 8000772:	214e      	movs	r1, #78	@ 0x4e
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <lcd_send_cmd+0x5c>)
 8000776:	f001 f86d 	bl	8001854 <HAL_I2C_Master_Transmit>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000094 	.word	0x20000094

08000788 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af02      	add	r7, sp, #8
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f023 030f 	bic.w	r3, r3, #15
 8000798:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	f043 030d 	orr.w	r3, r3, #13
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	f043 0309 	orr.w	r3, r3, #9
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80007b4:	7bbb      	ldrb	r3, [r7, #14]
 80007b6:	f043 030d 	orr.w	r3, r3, #13
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	f043 0309 	orr.w	r3, r3, #9
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007c8:	f107 0208 	add.w	r2, r7, #8
 80007cc:	2364      	movs	r3, #100	@ 0x64
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2304      	movs	r3, #4
 80007d2:	214e      	movs	r1, #78	@ 0x4e
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <lcd_send_data+0x5c>)
 80007d6:	f001 f83d 	bl	8001854 <HAL_I2C_Master_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000094 	.word	0x20000094

080007e8 <lcd_clear>:

void lcd_clear (void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff ff9a 	bl	8000728 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	e005      	b.n	8000806 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80007fa:	2020      	movs	r0, #32
 80007fc:	f7ff ffc4 	bl	8000788 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3301      	adds	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b63      	cmp	r3, #99	@ 0x63
 800080a:	ddf6      	ble.n	80007fa <lcd_clear+0x12>
	}
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <lcd_init>:

void lcd_init (void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800081a:	2032      	movs	r0, #50	@ 0x32
 800081c:	f000 fc16 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000820:	2030      	movs	r0, #48	@ 0x30
 8000822:	f7ff ff81 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000826:	2005      	movs	r0, #5
 8000828:	f000 fc10 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x30);
 800082c:	2030      	movs	r0, #48	@ 0x30
 800082e:	f7ff ff7b 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000832:	2001      	movs	r0, #1
 8000834:	f000 fc0a 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000838:	2030      	movs	r0, #48	@ 0x30
 800083a:	f7ff ff75 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(10);
 800083e:	200a      	movs	r0, #10
 8000840:	f000 fc04 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000844:	2020      	movs	r0, #32
 8000846:	f7ff ff6f 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(10);
 800084a:	200a      	movs	r0, #10
 800084c:	f000 fbfe 	bl	800104c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000850:	2028      	movs	r0, #40	@ 0x28
 8000852:	f7ff ff69 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f000 fbf8 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800085c:	2008      	movs	r0, #8
 800085e:	f7ff ff63 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f000 fbf2 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff ff5d 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f000 fbec 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000874:	2006      	movs	r0, #6
 8000876:	f7ff ff57 	bl	8000728 <lcd_send_cmd>
	HAL_Delay(1);
 800087a:	2001      	movs	r0, #1
 800087c:	f000 fbe6 	bl	800104c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000880:	200c      	movs	r0, #12
 8000882:	f7ff ff51 	bl	8000728 <lcd_send_cmd>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000892:	e006      	b.n	80008a2 <lcd_send_string+0x18>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff73 	bl	8000788 <lcd_send_data>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1f4      	bne.n	8000894 <lcd_send_string+0xa>
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <reset.0>:
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  setupKeypad();
  lcd_init();

  void reset(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	f8c7 c004 	str.w	ip, [r7, #4]
	  lcd_clear();
 80008be:	f7ff ff93 	bl	80007e8 <lcd_clear>
  	  lcd_send_cmd(0x80|0x00);
 80008c2:	2080      	movs	r0, #128	@ 0x80
 80008c4:	f7ff ff30 	bl	8000728 <lcd_send_cmd>
  	  lcd_send_string("Student #: ");
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <reset.0+0x48>)
 80008ca:	f7ff ffde 	bl	800088a <lcd_send_string>

  	  lcd_send_cmd(0x80|0x40);
 80008ce:	20c0      	movs	r0, #192	@ 0xc0
 80008d0:	f7ff ff2a 	bl	8000728 <lcd_send_cmd>
  	  lcd_send_string("");
 80008d4:	480a      	ldr	r0, [pc, #40]	@ (8000900 <reset.0+0x4c>)
 80008d6:	f7ff ffd8 	bl	800088a <lcd_send_string>

  	  lcd_send_cmd(0x80|0x14);
 80008da:	2094      	movs	r0, #148	@ 0x94
 80008dc:	f7ff ff24 	bl	8000728 <lcd_send_cmd>
  	  lcd_send_string("Press * to enter");
 80008e0:	4808      	ldr	r0, [pc, #32]	@ (8000904 <reset.0+0x50>)
 80008e2:	f7ff ffd2 	bl	800088a <lcd_send_string>

  	  lcd_send_cmd(0x80|0x54);
 80008e6:	20d4      	movs	r0, #212	@ 0xd4
 80008e8:	f7ff ff1e 	bl	8000728 <lcd_send_cmd>
  	  lcd_send_string("");
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <reset.0+0x4c>)
 80008ee:	f7ff ffcc 	bl	800088a <lcd_send_string>
  }
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	080036bc 	.word	0x080036bc
 8000900:	080036c8 	.word	0x080036c8
 8000904:	080036cc 	.word	0x080036cc

08000908 <main>:
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
int main(void)
 800090e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_Init();
 8000914:	f000 fb28 	bl	8000f68 <HAL_Init>
  SystemClock_Config();
 8000918:	f000 f8a6 	bl	8000a68 <SystemClock_Config>
  MX_GPIO_Init();
 800091c:	f000 f93e 	bl	8000b9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000920:	f000 f90e 	bl	8000b40 <MX_I2C1_Init>
  setupKeypad();
 8000924:	f7ff fe4c 	bl	80005c0 <setupKeypad>
  lcd_init();
 8000928:	f7ff ff75 	bl	8000816 <lcd_init>

  reset();
 800092c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000930:	469c      	mov	ip, r3
 8000932:	f7ff ffbf 	bl	80008b4 <reset.0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_send_cmd(0x80|0x0B);
 8000936:	208b      	movs	r0, #139	@ 0x8b
 8000938:	f7ff fef6 	bl	8000728 <lcd_send_cmd>

  int count = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  char numbers[8];
  char password[8] = {'2', '0', '8', '9', '6', '0', '5', '2'};
 8000940:	4a44      	ldr	r2, [pc, #272]	@ (8000a54 <main+0x14c>)
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	e892 0003 	ldmia.w	r2, {r0, r1}
 800094a:	e883 0003 	stmia.w	r3, {r0, r1}

  while (1) {
	  char key = scanKeypad();
 800094e:	f7ff fe85 	bl	800065c <scanKeypad>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  if (key != '\0') {
 8000958:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f6      	beq.n	800094e <main+0x46>
		  if (key == '#') {
 8000960:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000964:	2b23      	cmp	r3, #35	@ 0x23
 8000966:	d10a      	bne.n	800097e <main+0x76>
			  reset();
 8000968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096c:	469c      	mov	ip, r3
 800096e:	f7ff ffa1 	bl	80008b4 <reset.0>
			  lcd_send_cmd(0x80|0x0B);
 8000972:	208b      	movs	r0, #139	@ 0x8b
 8000974:	f7ff fed8 	bl	8000728 <lcd_send_cmd>
			  count = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800097c:	e7e7      	b.n	800094e <main+0x46>
		  }
		  else if (key == '*') {
 800097e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000982:	2b2a      	cmp	r3, #42	@ 0x2a
 8000984:	d14a      	bne.n	8000a1c <main+0x114>
			  lcd_send_cmd(0x80|0x54);
 8000986:	20d4      	movs	r0, #212	@ 0xd4
 8000988:	f7ff fece 	bl	8000728 <lcd_send_cmd>
			  lcd_send_string("WAIT");
 800098c:	4832      	ldr	r0, [pc, #200]	@ (8000a58 <main+0x150>)
 800098e:	f7ff ff7c 	bl	800088a <lcd_send_string>
			  HAL_Delay(1000);
 8000992:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000996:	f000 fb59 	bl	800104c <HAL_Delay>
			  lcd_send_string(".");
 800099a:	4830      	ldr	r0, [pc, #192]	@ (8000a5c <main+0x154>)
 800099c:	f7ff ff75 	bl	800088a <lcd_send_string>
			  HAL_Delay(1000);
 80009a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a4:	f000 fb52 	bl	800104c <HAL_Delay>
			  lcd_send_string(".");
 80009a8:	482c      	ldr	r0, [pc, #176]	@ (8000a5c <main+0x154>)
 80009aa:	f7ff ff6e 	bl	800088a <lcd_send_string>
			  HAL_Delay(1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009b2:	f000 fb4b 	bl	800104c <HAL_Delay>
			  lcd_send_string(".");
 80009b6:	4829      	ldr	r0, [pc, #164]	@ (8000a5c <main+0x154>)
 80009b8:	f7ff ff67 	bl	800088a <lcd_send_string>
			  HAL_Delay(1000);
 80009bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c0:	f000 fb44 	bl	800104c <HAL_Delay>

			  if (!memcmp(numbers, password, sizeof(numbers))) {
 80009c4:	f107 0114 	add.w	r1, r7, #20
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	2208      	movs	r2, #8
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fff2 	bl	80029b8 <memcmp>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d115      	bne.n	8000a06 <main+0xfe>
				  lcd_send_cmd(0x80|0x54);
 80009da:	20d4      	movs	r0, #212	@ 0xd4
 80009dc:	f7ff fea4 	bl	8000728 <lcd_send_cmd>
				  lcd_send_string("WELCOME!");
 80009e0:	481f      	ldr	r0, [pc, #124]	@ (8000a60 <main+0x158>)
 80009e2:	f7ff ff52 	bl	800088a <lcd_send_string>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ec:	481d      	ldr	r0, [pc, #116]	@ (8000a64 <main+0x15c>)
 80009ee:	f000 fdd3 	bl	8001598 <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 80009f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f6:	f000 fb29 	bl	800104c <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a00:	4818      	ldr	r0, [pc, #96]	@ (8000a64 <main+0x15c>)
 8000a02:	f000 fdc9 	bl	8001598 <HAL_GPIO_WritePin>
			  }

			  reset();
 8000a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0a:	469c      	mov	ip, r3
 8000a0c:	f7ff ff52 	bl	80008b4 <reset.0>
			  lcd_send_cmd(0x80|0x0B);
 8000a10:	208b      	movs	r0, #139	@ 0x8b
 8000a12:	f7ff fe89 	bl	8000728 <lcd_send_cmd>
			  count = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a1a:	e798      	b.n	800094e <main+0x46>
		  } else {
			  if (count < 8) {
 8000a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dc95      	bgt.n	800094e <main+0x46>
				  //printf("Key pressed: %c\n", key);
				  char str[20];
				  str[0] = key;
 8000a22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000a26:	703b      	strb	r3, [r7, #0]
				  str[1] = '\0';
 8000a28:	2300      	movs	r3, #0
 8000a2a:	707b      	strb	r3, [r7, #1]
				  lcd_send_string(str);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff2b 	bl	800088a <lcd_send_string>
				  numbers[count] = key;
 8000a34:	f107 021c 	add.w	r2, r7, #28
 8000a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a3a:	4413      	add	r3, r2
 8000a3c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000a40:	701a      	strb	r2, [r3, #0]
				  count++;
 8000a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
				  HAL_Delay(350);
 8000a48:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8000a4c:	f000 fafe 	bl	800104c <HAL_Delay>
  while (1) {
 8000a50:	e77d      	b.n	800094e <main+0x46>
 8000a52:	bf00      	nop
 8000a54:	080036f8 	.word	0x080036f8
 8000a58:	080036e0 	.word	0x080036e0
 8000a5c:	080036e8 	.word	0x080036e8
 8000a60:	080036ec 	.word	0x080036ec
 8000a64:	40020000 	.word	0x40020000

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	@ 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2230      	movs	r2, #48	@ 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 ffae 	bl	80029d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	4b29      	ldr	r3, [pc, #164]	@ (8000b38 <SystemClock_Config+0xd0>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	4a28      	ldr	r2, [pc, #160]	@ (8000b38 <SystemClock_Config+0xd0>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9c:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <SystemClock_Config+0xd0>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	4b23      	ldr	r3, [pc, #140]	@ (8000b3c <SystemClock_Config+0xd4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab4:	4a21      	ldr	r2, [pc, #132]	@ (8000b3c <SystemClock_Config+0xd4>)
 8000ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <SystemClock_Config+0xd4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000adc:	2310      	movs	r3, #16
 8000ade:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ae0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ae4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aea:	2307      	movs	r3, #7
 8000aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fa08 	bl	8001f08 <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000afe:	f000 f8c9 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	230f      	movs	r3, #15
 8000b04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2302      	movs	r3, #2
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fc6a 	bl	80023f8 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b2a:	f000 f8b3 	bl	8000c94 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3750      	adds	r7, #80	@ 0x50
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	@ (8000b94 <MX_I2C1_Init+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b4c:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_I2C1_Init+0x58>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b7e:	f000 fd25 	bl	80015cc <HAL_I2C_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 f884 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000094 	.word	0x20000094
 8000b94:	40005400 	.word	0x40005400
 8000b98:	000186a0 	.word	0x000186a0

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a26      	ldr	r2, [pc, #152]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
 8000c0c:	4812      	ldr	r0, [pc, #72]	@ (8000c58 <MX_GPIO_Init+0xbc>)
 8000c0e:	f000 fcc3 	bl	8001598 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8000c12:	f240 3303 	movw	r3, #771	@ 0x303
 8000c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <MX_GPIO_Init+0xbc>)
 8000c28:	f000 fb1a 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000c2c:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 8000c30:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	4619      	mov	r1, r3
 8000c44:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <MX_GPIO_Init+0xbc>)
 8000c46:	f000 fb0b 	bl	8001260 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e009      	b.n	8000c82 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	60ba      	str	r2, [r7, #8]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fc7a 	bl	8000570 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dbf1      	blt.n	8000c6e <_write+0x12>
  }
  return len;
 8000c8a:	687b      	ldr	r3, [r7, #4]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f000 fa88 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	@ (8000d78 <HAL_I2C_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12b      	bne.n	8000d6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d32:	23c0      	movs	r3, #192	@ 0xc0
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d36:	2312      	movs	r3, #18
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d42:	2304      	movs	r3, #4
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <HAL_I2C_MspInit+0x8c>)
 8000d4e:	f000 fa87 	bl	8001260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	@ 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <NMI_Handler+0x4>

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <UsageFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dda:	f000 f917 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e00a      	b.n	8000e0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df4:	f3af 8000 	nop.w
 8000df8:	4601      	mov	r1, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	60ba      	str	r2, [r7, #8]
 8000e00:	b2ca      	uxtb	r2, r1
 8000e02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	3301      	adds	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	dbf0      	blt.n	8000df4 <_read+0x12>
  }

  return len;
 8000e12:	687b      	ldr	r3, [r7, #4]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e44:	605a      	str	r2, [r3, #4]
  return 0;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_isatty>:

int _isatty(int file)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5c:	2301      	movs	r3, #1
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f001 fd98 	bl	80029e8 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20018000 	.word	0x20018000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	200000e8 	.word	0x200000e8
 8000eec:	20000240 	.word	0x20000240

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f18:	f7ff ffea 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f001 fd57 	bl	80029f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fcdf 	bl	8000908 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f58:	0800376c 	.word	0x0800376c
  ldr r2, =_sbss
 8000f5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f60:	2000023c 	.word	0x2000023c

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f931 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fe82 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f93b 	bl	8001246 <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe8:	f000 f911 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000010 	.word	0x20000010
 8001004:	20000018 	.word	0x20000018
 8001008:	20000014 	.word	0x20000014

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000018 	.word	0x20000018
 8001030:	200000ec 	.word	0x200000ec

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	200000ec 	.word	0x200000ec

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000018 	.word	0x20000018

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_SetPriority>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	@ (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	@ (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	@ 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	@ 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <SysTick_Config>:
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011d8:	f7ff ff8e 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff47 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff5c 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff8e 	bl	800114c <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5d 	bl	80010f8 <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffb0 	bl	80011b4 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	@ 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	e159      	b.n	8001530 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	429a      	cmp	r2, r3
 8001296:	f040 8148 	bne.w	800152a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d005      	beq.n	80012b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d130      	bne.n	8001314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 0201 	and.w	r2, r3, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b03      	cmp	r3, #3
 800131e:	d017      	beq.n	8001350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d123      	bne.n	80013a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3208      	adds	r2, #8
 800139e:	69b9      	ldr	r1, [r7, #24]
 80013a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0203 	and.w	r2, r3, #3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80a2 	beq.w	800152a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b57      	ldr	r3, [pc, #348]	@ (8001548 <HAL_GPIO_Init+0x2e8>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	4a56      	ldr	r2, [pc, #344]	@ (8001548 <HAL_GPIO_Init+0x2e8>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f6:	4b54      	ldr	r3, [pc, #336]	@ (8001548 <HAL_GPIO_Init+0x2e8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001402:	4a52      	ldr	r2, [pc, #328]	@ (800154c <HAL_GPIO_Init+0x2ec>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a49      	ldr	r2, [pc, #292]	@ (8001550 <HAL_GPIO_Init+0x2f0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x202>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a48      	ldr	r2, [pc, #288]	@ (8001554 <HAL_GPIO_Init+0x2f4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x1fe>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a47      	ldr	r2, [pc, #284]	@ (8001558 <HAL_GPIO_Init+0x2f8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x1fa>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a46      	ldr	r2, [pc, #280]	@ (800155c <HAL_GPIO_Init+0x2fc>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x1f6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a45      	ldr	r2, [pc, #276]	@ (8001560 <HAL_GPIO_Init+0x300>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x1f2>
 800144e:	2304      	movs	r3, #4
 8001450:	e008      	b.n	8001464 <HAL_GPIO_Init+0x204>
 8001452:	2307      	movs	r3, #7
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x204>
 8001456:	2303      	movs	r3, #3
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x204>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x204>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x204>
 8001462:	2300      	movs	r3, #0
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	4935      	ldr	r1, [pc, #212]	@ (800154c <HAL_GPIO_Init+0x2ec>)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001482:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <HAL_GPIO_Init+0x304>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d0:	4a24      	ldr	r2, [pc, #144]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014d6:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_GPIO_Init+0x304>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001524:	4a0f      	ldr	r2, [pc, #60]	@ (8001564 <HAL_GPIO_Init+0x304>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	f67f aea2 	bls.w	800127c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3724      	adds	r7, #36	@ 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40013800 	.word	0x40013800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	40021000 	.word	0x40021000
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e001      	b.n	800158a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b4:	e003      	b.n	80015be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e12b      	b.n	8001836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d106      	bne.n	80015f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fb7e 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2224      	movs	r2, #36	@ 0x24
 80015fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800161e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800162e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001630:	f001 f8da 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8001634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a81      	ldr	r2, [pc, #516]	@ (8001840 <HAL_I2C_Init+0x274>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d807      	bhi.n	8001650 <HAL_I2C_Init+0x84>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4a80      	ldr	r2, [pc, #512]	@ (8001844 <HAL_I2C_Init+0x278>)
 8001644:	4293      	cmp	r3, r2
 8001646:	bf94      	ite	ls
 8001648:	2301      	movls	r3, #1
 800164a:	2300      	movhi	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	e006      	b.n	800165e <HAL_I2C_Init+0x92>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4a7d      	ldr	r2, [pc, #500]	@ (8001848 <HAL_I2C_Init+0x27c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	bf94      	ite	ls
 8001658:	2301      	movls	r3, #1
 800165a:	2300      	movhi	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0e7      	b.n	8001836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4a78      	ldr	r2, [pc, #480]	@ (800184c <HAL_I2C_Init+0x280>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	430a      	orrs	r2, r1
 8001684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a6a      	ldr	r2, [pc, #424]	@ (8001840 <HAL_I2C_Init+0x274>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d802      	bhi.n	80016a0 <HAL_I2C_Init+0xd4>
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	3301      	adds	r3, #1
 800169e:	e009      	b.n	80016b4 <HAL_I2C_Init+0xe8>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4a69      	ldr	r2, [pc, #420]	@ (8001850 <HAL_I2C_Init+0x284>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	3301      	adds	r3, #1
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	495c      	ldr	r1, [pc, #368]	@ (8001840 <HAL_I2C_Init+0x274>)
 80016d0:	428b      	cmp	r3, r1
 80016d2:	d819      	bhi.n	8001708 <HAL_I2C_Init+0x13c>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1e59      	subs	r1, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e2:	1c59      	adds	r1, r3, #1
 80016e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016e8:	400b      	ands	r3, r1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00a      	beq.n	8001704 <HAL_I2C_Init+0x138>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1e59      	subs	r1, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001702:	e051      	b.n	80017a8 <HAL_I2C_Init+0x1dc>
 8001704:	2304      	movs	r3, #4
 8001706:	e04f      	b.n	80017a8 <HAL_I2C_Init+0x1dc>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d111      	bne.n	8001734 <HAL_I2C_Init+0x168>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	440b      	add	r3, r1
 800171e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001722:	3301      	adds	r3, #1
 8001724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	e012      	b.n	800175a <HAL_I2C_Init+0x18e>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	0099      	lsls	r1, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Init+0x196>
 800175e:	2301      	movs	r3, #1
 8001760:	e022      	b.n	80017a8 <HAL_I2C_Init+0x1dc>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10e      	bne.n	8001788 <HAL_I2C_Init+0x1bc>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1e58      	subs	r0, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6859      	ldr	r1, [r3, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	440b      	add	r3, r1
 8001778:	fbb0 f3f3 	udiv	r3, r0, r3
 800177c:	3301      	adds	r3, #1
 800177e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001786:	e00f      	b.n	80017a8 <HAL_I2C_Init+0x1dc>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1e58      	subs	r0, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	0099      	lsls	r1, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	fbb0 f3f3 	udiv	r3, r0, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	6809      	ldr	r1, [r1, #0]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6911      	ldr	r1, [r2, #16]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68d2      	ldr	r2, [r2, #12]
 80017e2:	4311      	orrs	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	000186a0 	.word	0x000186a0
 8001844:	001e847f 	.word	0x001e847f
 8001848:	003d08ff 	.word	0x003d08ff
 800184c:	431bde83 	.word	0x431bde83
 8001850:	10624dd3 	.word	0x10624dd3

08001854 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	817b      	strh	r3, [r7, #10]
 8001864:	4613      	mov	r3, r2
 8001866:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fbe4 	bl	8001034 <HAL_GetTick>
 800186c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b20      	cmp	r3, #32
 8001878:	f040 80e0 	bne.w	8001a3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2319      	movs	r3, #25
 8001882:	2201      	movs	r2, #1
 8001884:	4970      	ldr	r1, [pc, #448]	@ (8001a48 <HAL_I2C_Master_Transmit+0x1f4>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f964 	bl	8001b54 <I2C_WaitOnFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001892:	2302      	movs	r3, #2
 8001894:	e0d3      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_I2C_Master_Transmit+0x50>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e0cc      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d007      	beq.n	80018ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2221      	movs	r2, #33	@ 0x21
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2210      	movs	r2, #16
 80018e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	893a      	ldrh	r2, [r7, #8]
 80018fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a50      	ldr	r2, [pc, #320]	@ (8001a4c <HAL_I2C_Master_Transmit+0x1f8>)
 800190a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800190c:	8979      	ldrh	r1, [r7, #10]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	6a3a      	ldr	r2, [r7, #32]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f89c 	bl	8001a50 <I2C_MasterRequestWrite>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e08d      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001938:	e066      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fa22 	bl	8001d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00d      	beq.n	8001966 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	2b04      	cmp	r3, #4
 8001950:	d107      	bne.n	8001962 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06b      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d11b      	bne.n	80019dc <HAL_I2C_Master_Transmit+0x188>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d017      	beq.n	80019dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	6a39      	ldr	r1, [r7, #32]
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fa19 	bl	8001e18 <I2C_WaitOnBTFFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00d      	beq.n	8001a08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d107      	bne.n	8001a04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e01a      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d194      	bne.n	800193a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e000      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	00100002 	.word	0x00100002
 8001a4c:	ffff0000 	.word	0xffff0000

08001a50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d006      	beq.n	8001a7a <I2C_MasterRequestWrite+0x2a>
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d003      	beq.n	8001a7a <I2C_MasterRequestWrite+0x2a>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a78:	d108      	bne.n	8001a8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e00b      	b.n	8001aa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	2b12      	cmp	r3, #18
 8001a92:	d107      	bne.n	8001aa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001aa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f84f 	bl	8001b54 <I2C_WaitOnFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00d      	beq.n	8001ad8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aca:	d103      	bne.n	8001ad4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ad2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e035      	b.n	8001b44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ae0:	d108      	bne.n	8001af4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	e01b      	b.n	8001b2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	11db      	asrs	r3, r3, #7
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f003 0306 	and.w	r3, r3, #6
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f063 030f 	orn	r3, r3, #15
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	490e      	ldr	r1, [pc, #56]	@ (8001b4c <I2C_MasterRequestWrite+0xfc>)
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f898 	bl	8001c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e010      	b.n	8001b44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4907      	ldr	r1, [pc, #28]	@ (8001b50 <I2C_MasterRequestWrite+0x100>)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f888 	bl	8001c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	00010008 	.word	0x00010008
 8001b50:	00010002 	.word	0x00010002

08001b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b64:	e048      	b.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b6c:	d044      	beq.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6e:	f7ff fa61 	bl	8001034 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d302      	bcc.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d139      	bne.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	0c1b      	lsrs	r3, r3, #16
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d10d      	bne.n	8001baa <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	43da      	mvns	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2301      	moveq	r3, #1
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	e00c      	b.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d116      	bne.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f043 0220 	orr.w	r2, r3, #32
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e023      	b.n	8001c40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10d      	bne.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	e00c      	b.n	8001c38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	43da      	mvns	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d093      	beq.n	8001b66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c56:	e071      	b.n	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c66:	d123      	bne.n	8001cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e067      	b.n	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cb6:	d041      	beq.n	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb8:	f7ff f9bc 	bl	8001034 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d302      	bcc.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d136      	bne.n	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10c      	bne.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	e00b      	b.n	8001d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d016      	beq.n	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e021      	b.n	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10c      	bne.n	8001d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4013      	ands	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e00b      	b.n	8001d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf14      	ite	ne
 8001d72:	2301      	movne	r3, #1
 8001d74:	2300      	moveq	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f47f af6d 	bne.w	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d94:	e034      	b.n	8001e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f886 	bl	8001ea8 <I2C_IsAcknowledgeFailed>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e034      	b.n	8001e10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dac:	d028      	beq.n	8001e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dae:	f7ff f941 	bl	8001034 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d302      	bcc.n	8001dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d11d      	bne.n	8001e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dce:	2b80      	cmp	r3, #128	@ 0x80
 8001dd0:	d016      	beq.n	8001e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f043 0220 	orr.w	r2, r3, #32
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e007      	b.n	8001e10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0a:	2b80      	cmp	r3, #128	@ 0x80
 8001e0c:	d1c3      	bne.n	8001d96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e24:	e034      	b.n	8001e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f83e 	bl	8001ea8 <I2C_IsAcknowledgeFailed>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e034      	b.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e3c:	d028      	beq.n	8001e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3e:	f7ff f8f9 	bl	8001034 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d302      	bcc.n	8001e54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d11d      	bne.n	8001e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d016      	beq.n	8001e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e007      	b.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d1c3      	bne.n	8001e26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d11b      	bne.n	8001ef8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ec8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	f043 0204 	orr.w	r2, r3, #4
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e267      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d075      	beq.n	8002012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f26:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d00c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b85      	ldr	r3, [pc, #532]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d112      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f3e:	4b82      	ldr	r3, [pc, #520]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f4a:	d10b      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05b      	beq.n	8002010 <HAL_RCC_OscConfig+0x108>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d157      	bne.n	8002010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e242      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x74>
 8001f6e:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x98>
 8001f86:	4b70      	ldr	r3, [pc, #448]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6f      	ldr	r2, [pc, #444]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b6d      	ldr	r3, [pc, #436]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6c      	ldr	r2, [pc, #432]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001fa0:	4b69      	ldr	r3, [pc, #420]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a68      	ldr	r2, [pc, #416]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b66      	ldr	r3, [pc, #408]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a65      	ldr	r2, [pc, #404]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f838 	bl	8001034 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f834 	bl	8001034 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	@ 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e207      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b5b      	ldr	r3, [pc, #364]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xc0>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f824 	bl	8001034 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff f820 	bl	8001034 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	@ 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1f3      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b51      	ldr	r3, [pc, #324]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xe8>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d063      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800201e:	4b4a      	ldr	r3, [pc, #296]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b47      	ldr	r3, [pc, #284]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b44      	ldr	r3, [pc, #272]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x152>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1c7      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b3b      	ldr	r3, [pc, #236]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4937      	ldr	r1, [pc, #220]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e03a      	b.n	80020e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b34      	ldr	r3, [pc, #208]	@ (800214c <HAL_RCC_OscConfig+0x244>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe ffd9 	bl	8001034 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002086:	f7fe ffd5 	bl	8001034 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1a8      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	4b2b      	ldr	r3, [pc, #172]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b28      	ldr	r3, [pc, #160]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4925      	ldr	r1, [pc, #148]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b24      	ldr	r3, [pc, #144]	@ (800214c <HAL_RCC_OscConfig+0x244>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe ffb8 	bl	8001034 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7fe ffb4 	bl	8001034 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e187      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d036      	beq.n	8002160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d016      	beq.n	8002128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_RCC_OscConfig+0x248>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7fe ff98 	bl	8001034 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7fe ff94 	bl	8001034 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e167      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800211c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x200>
 8002126:	e01b      	b.n	8002160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_OscConfig+0x248>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7fe ff81 	bl	8001034 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	e00e      	b.n	8002154 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7fe ff7d 	bl	8001034 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d907      	bls.n	8002154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e150      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
 8002148:	40023800 	.word	0x40023800
 800214c:	42470000 	.word	0x42470000
 8002150:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ea      	bne.n	8002136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8097 	beq.w	800229c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b81      	ldr	r3, [pc, #516]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10f      	bne.n	800219e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b7d      	ldr	r3, [pc, #500]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a7c      	ldr	r2, [pc, #496]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
 800218e:	4b7a      	ldr	r3, [pc, #488]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b77      	ldr	r3, [pc, #476]	@ (800237c <HAL_RCC_OscConfig+0x474>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021aa:	4b74      	ldr	r3, [pc, #464]	@ (800237c <HAL_RCC_OscConfig+0x474>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a73      	ldr	r2, [pc, #460]	@ (800237c <HAL_RCC_OscConfig+0x474>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7fe ff3d 	bl	8001034 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe ff39 	bl	8001034 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e10c      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b6a      	ldr	r3, [pc, #424]	@ (800237c <HAL_RCC_OscConfig+0x474>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x2ea>
 80021e4:	4b64      	ldr	r3, [pc, #400]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e8:	4a63      	ldr	r2, [pc, #396]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x324>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x30c>
 80021fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6713      	str	r3, [r2, #112]	@ 0x70
 8002206:	4b5c      	ldr	r3, [pc, #368]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	4a5b      	ldr	r2, [pc, #364]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6713      	str	r3, [r2, #112]	@ 0x70
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0x324>
 8002214:	4b58      	ldr	r3, [pc, #352]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002218:	4a57      	ldr	r2, [pc, #348]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002220:	4b55      	ldr	r3, [pc, #340]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002224:	4a54      	ldr	r2, [pc, #336]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002226:	f023 0304 	bic.w	r3, r3, #4
 800222a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe fefe 	bl	8001034 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fefa 	bl	8001034 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0cb      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	4b49      	ldr	r3, [pc, #292]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0ee      	beq.n	800223c <HAL_RCC_OscConfig+0x334>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7fe fee8 	bl	8001034 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002266:	e00a      	b.n	800227e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fee4 	bl	8001034 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e0b5      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227e:	4b3e      	ldr	r3, [pc, #248]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ee      	bne.n	8002268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002290:	4b39      	ldr	r3, [pc, #228]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	4a38      	ldr	r2, [pc, #224]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800229a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a1 	beq.w	80023e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a6:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d05c      	beq.n	800236c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d141      	bne.n	800233e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <HAL_RCC_OscConfig+0x478>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe feb8 	bl	8001034 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe feb4 	bl	8001034 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e087      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	085b      	lsrs	r3, r3, #1
 80022fe:	3b01      	subs	r3, #1
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	491b      	ldr	r1, [pc, #108]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCC_OscConfig+0x478>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe fe8d 	bl	8001034 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe fe89 	bl	8001034 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e05c      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x416>
 800233c:	e054      	b.n	80023e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <HAL_RCC_OscConfig+0x478>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fe76 	bl	8001034 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fe72 	bl	8001034 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e045      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x444>
 800236a:	e03d      	b.n	80023e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e038      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000
 8002380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002384:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <HAL_RCC_OscConfig+0x4ec>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d028      	beq.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d121      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d11a      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023bc:	4293      	cmp	r3, r2
 80023be:	d111      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	3b01      	subs	r3, #1
 80023ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0cc      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b68      	ldr	r3, [pc, #416]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d90c      	bls.n	8002434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b65      	ldr	r3, [pc, #404]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b63      	ldr	r3, [pc, #396]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b8      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800244c:	4b59      	ldr	r3, [pc, #356]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a58      	ldr	r2, [pc, #352]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002456:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002464:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a52      	ldr	r2, [pc, #328]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800246e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b50      	ldr	r3, [pc, #320]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	494d      	ldr	r1, [pc, #308]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d044      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b47      	ldr	r3, [pc, #284]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d119      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b3f      	ldr	r3, [pc, #252]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3b      	ldr	r3, [pc, #236]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e067      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4934      	ldr	r1, [pc, #208]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fda4 	bl	8001034 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fda0 	bl	8001034 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e04f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b25      	ldr	r3, [pc, #148]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d20c      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e032      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4916      	ldr	r1, [pc, #88]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256a:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490e      	ldr	r1, [pc, #56]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800257e:	f000 f821 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	490a      	ldr	r1, [pc, #40]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	4a09      	ldr	r2, [pc, #36]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fd04 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08003710 	.word	0x08003710
 80025bc:	20000010 	.word	0x20000010
 80025c0:	20000014 	.word	0x20000014

080025c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c8:	b094      	sub	sp, #80	@ 0x50
 80025ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025dc:	4b79      	ldr	r3, [pc, #484]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d00d      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x40>
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	f200 80e1 	bhi.w	80027b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x34>
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0x3a>
 80025f6:	e0db      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f8:	4b73      	ldr	r3, [pc, #460]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025fc:	e0db      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025fe:	4b73      	ldr	r3, [pc, #460]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002602:	e0d8      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002604:	4b6f      	ldr	r3, [pc, #444]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800260c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800260e:	4b6d      	ldr	r3, [pc, #436]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261a:	4b6a      	ldr	r3, [pc, #424]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	099b      	lsrs	r3, r3, #6
 8002620:	2200      	movs	r2, #0
 8002622:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002624:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262c:	633b      	str	r3, [r7, #48]	@ 0x30
 800262e:	2300      	movs	r3, #0
 8002630:	637b      	str	r3, [r7, #52]	@ 0x34
 8002632:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002636:	4622      	mov	r2, r4
 8002638:	462b      	mov	r3, r5
 800263a:	f04f 0000 	mov.w	r0, #0
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	0159      	lsls	r1, r3, #5
 8002644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002648:	0150      	lsls	r0, r2, #5
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4621      	mov	r1, r4
 8002650:	1a51      	subs	r1, r2, r1
 8002652:	6139      	str	r1, [r7, #16]
 8002654:	4629      	mov	r1, r5
 8002656:	eb63 0301 	sbc.w	r3, r3, r1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002668:	4659      	mov	r1, fp
 800266a:	018b      	lsls	r3, r1, #6
 800266c:	4651      	mov	r1, sl
 800266e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002672:	4651      	mov	r1, sl
 8002674:	018a      	lsls	r2, r1, #6
 8002676:	4651      	mov	r1, sl
 8002678:	ebb2 0801 	subs.w	r8, r2, r1
 800267c:	4659      	mov	r1, fp
 800267e:	eb63 0901 	sbc.w	r9, r3, r1
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800268e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002696:	4690      	mov	r8, r2
 8002698:	4699      	mov	r9, r3
 800269a:	4623      	mov	r3, r4
 800269c:	eb18 0303 	adds.w	r3, r8, r3
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	462b      	mov	r3, r5
 80026a4:	eb49 0303 	adc.w	r3, r9, r3
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026b6:	4629      	mov	r1, r5
 80026b8:	024b      	lsls	r3, r1, #9
 80026ba:	4621      	mov	r1, r4
 80026bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026c0:	4621      	mov	r1, r4
 80026c2:	024a      	lsls	r2, r1, #9
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ca:	2200      	movs	r2, #0
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026d4:	f7fd fdd4 	bl	8000280 <__aeabi_uldivmod>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4613      	mov	r3, r2
 80026de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026e0:	e058      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e2:	4b38      	ldr	r3, [pc, #224]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	099b      	lsrs	r3, r3, #6
 80026e8:	2200      	movs	r2, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	4611      	mov	r1, r2
 80026ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026f2:	623b      	str	r3, [r7, #32]
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026fc:	4642      	mov	r2, r8
 80026fe:	464b      	mov	r3, r9
 8002700:	f04f 0000 	mov.w	r0, #0
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	0159      	lsls	r1, r3, #5
 800270a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270e:	0150      	lsls	r0, r2, #5
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4641      	mov	r1, r8
 8002716:	ebb2 0a01 	subs.w	sl, r2, r1
 800271a:	4649      	mov	r1, r9
 800271c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800272c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002730:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002734:	ebb2 040a 	subs.w	r4, r2, sl
 8002738:	eb63 050b 	sbc.w	r5, r3, fp
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	00eb      	lsls	r3, r5, #3
 8002746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274a:	00e2      	lsls	r2, r4, #3
 800274c:	4614      	mov	r4, r2
 800274e:	461d      	mov	r5, r3
 8002750:	4643      	mov	r3, r8
 8002752:	18e3      	adds	r3, r4, r3
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	464b      	mov	r3, r9
 8002758:	eb45 0303 	adc.w	r3, r5, r3
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800276a:	4629      	mov	r1, r5
 800276c:	028b      	lsls	r3, r1, #10
 800276e:	4621      	mov	r1, r4
 8002770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002774:	4621      	mov	r1, r4
 8002776:	028a      	lsls	r2, r1, #10
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800277e:	2200      	movs	r2, #0
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	61fa      	str	r2, [r7, #28]
 8002784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002788:	f7fd fd7a 	bl	8000280 <__aeabi_uldivmod>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4613      	mov	r3, r2
 8002792:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	3301      	adds	r3, #1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027ae:	e002      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3750      	adds	r7, #80	@ 0x50
 80027bc:	46bd      	mov	sp, r7
 80027be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	007a1200 	.word	0x007a1200

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000010 	.word	0x20000010

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027ec:	f7ff fff0 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0a9b      	lsrs	r3, r3, #10
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4903      	ldr	r1, [pc, #12]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	08003720 	.word	0x08003720

08002810 <std>:
 8002810:	2300      	movs	r3, #0
 8002812:	b510      	push	{r4, lr}
 8002814:	4604      	mov	r4, r0
 8002816:	e9c0 3300 	strd	r3, r3, [r0]
 800281a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800281e:	6083      	str	r3, [r0, #8]
 8002820:	8181      	strh	r1, [r0, #12]
 8002822:	6643      	str	r3, [r0, #100]	@ 0x64
 8002824:	81c2      	strh	r2, [r0, #14]
 8002826:	6183      	str	r3, [r0, #24]
 8002828:	4619      	mov	r1, r3
 800282a:	2208      	movs	r2, #8
 800282c:	305c      	adds	r0, #92	@ 0x5c
 800282e:	f000 f8d3 	bl	80029d8 <memset>
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <std+0x58>)
 8002834:	6263      	str	r3, [r4, #36]	@ 0x24
 8002836:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <std+0x5c>)
 8002838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800283a:	4b0d      	ldr	r3, [pc, #52]	@ (8002870 <std+0x60>)
 800283c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800283e:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <std+0x64>)
 8002840:	6323      	str	r3, [r4, #48]	@ 0x30
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <std+0x68>)
 8002844:	6224      	str	r4, [r4, #32]
 8002846:	429c      	cmp	r4, r3
 8002848:	d006      	beq.n	8002858 <std+0x48>
 800284a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800284e:	4294      	cmp	r4, r2
 8002850:	d002      	beq.n	8002858 <std+0x48>
 8002852:	33d0      	adds	r3, #208	@ 0xd0
 8002854:	429c      	cmp	r4, r3
 8002856:	d105      	bne.n	8002864 <std+0x54>
 8002858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800285c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002860:	f000 b8ec 	b.w	8002a3c <__retarget_lock_init_recursive>
 8002864:	bd10      	pop	{r4, pc}
 8002866:	bf00      	nop
 8002868:	08003295 	.word	0x08003295
 800286c:	080032b7 	.word	0x080032b7
 8002870:	080032ef 	.word	0x080032ef
 8002874:	08003313 	.word	0x08003313
 8002878:	200000f0 	.word	0x200000f0

0800287c <stdio_exit_handler>:
 800287c:	4a02      	ldr	r2, [pc, #8]	@ (8002888 <stdio_exit_handler+0xc>)
 800287e:	4903      	ldr	r1, [pc, #12]	@ (800288c <stdio_exit_handler+0x10>)
 8002880:	4803      	ldr	r0, [pc, #12]	@ (8002890 <stdio_exit_handler+0x14>)
 8002882:	f000 b869 	b.w	8002958 <_fwalk_sglue>
 8002886:	bf00      	nop
 8002888:	2000001c 	.word	0x2000001c
 800288c:	0800322d 	.word	0x0800322d
 8002890:	2000002c 	.word	0x2000002c

08002894 <cleanup_stdio>:
 8002894:	6841      	ldr	r1, [r0, #4]
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <cleanup_stdio+0x34>)
 8002898:	4299      	cmp	r1, r3
 800289a:	b510      	push	{r4, lr}
 800289c:	4604      	mov	r4, r0
 800289e:	d001      	beq.n	80028a4 <cleanup_stdio+0x10>
 80028a0:	f000 fcc4 	bl	800322c <_fflush_r>
 80028a4:	68a1      	ldr	r1, [r4, #8]
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <cleanup_stdio+0x38>)
 80028a8:	4299      	cmp	r1, r3
 80028aa:	d002      	beq.n	80028b2 <cleanup_stdio+0x1e>
 80028ac:	4620      	mov	r0, r4
 80028ae:	f000 fcbd 	bl	800322c <_fflush_r>
 80028b2:	68e1      	ldr	r1, [r4, #12]
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <cleanup_stdio+0x3c>)
 80028b6:	4299      	cmp	r1, r3
 80028b8:	d004      	beq.n	80028c4 <cleanup_stdio+0x30>
 80028ba:	4620      	mov	r0, r4
 80028bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028c0:	f000 bcb4 	b.w	800322c <_fflush_r>
 80028c4:	bd10      	pop	{r4, pc}
 80028c6:	bf00      	nop
 80028c8:	200000f0 	.word	0x200000f0
 80028cc:	20000158 	.word	0x20000158
 80028d0:	200001c0 	.word	0x200001c0

080028d4 <global_stdio_init.part.0>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <global_stdio_init.part.0+0x30>)
 80028d8:	4c0b      	ldr	r4, [pc, #44]	@ (8002908 <global_stdio_init.part.0+0x34>)
 80028da:	4a0c      	ldr	r2, [pc, #48]	@ (800290c <global_stdio_init.part.0+0x38>)
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	4620      	mov	r0, r4
 80028e0:	2200      	movs	r2, #0
 80028e2:	2104      	movs	r1, #4
 80028e4:	f7ff ff94 	bl	8002810 <std>
 80028e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80028ec:	2201      	movs	r2, #1
 80028ee:	2109      	movs	r1, #9
 80028f0:	f7ff ff8e 	bl	8002810 <std>
 80028f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80028f8:	2202      	movs	r2, #2
 80028fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028fe:	2112      	movs	r1, #18
 8002900:	f7ff bf86 	b.w	8002810 <std>
 8002904:	20000228 	.word	0x20000228
 8002908:	200000f0 	.word	0x200000f0
 800290c:	0800287d 	.word	0x0800287d

08002910 <__sfp_lock_acquire>:
 8002910:	4801      	ldr	r0, [pc, #4]	@ (8002918 <__sfp_lock_acquire+0x8>)
 8002912:	f000 b894 	b.w	8002a3e <__retarget_lock_acquire_recursive>
 8002916:	bf00      	nop
 8002918:	2000022d 	.word	0x2000022d

0800291c <__sfp_lock_release>:
 800291c:	4801      	ldr	r0, [pc, #4]	@ (8002924 <__sfp_lock_release+0x8>)
 800291e:	f000 b88f 	b.w	8002a40 <__retarget_lock_release_recursive>
 8002922:	bf00      	nop
 8002924:	2000022d 	.word	0x2000022d

08002928 <__sinit>:
 8002928:	b510      	push	{r4, lr}
 800292a:	4604      	mov	r4, r0
 800292c:	f7ff fff0 	bl	8002910 <__sfp_lock_acquire>
 8002930:	6a23      	ldr	r3, [r4, #32]
 8002932:	b11b      	cbz	r3, 800293c <__sinit+0x14>
 8002934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002938:	f7ff bff0 	b.w	800291c <__sfp_lock_release>
 800293c:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <__sinit+0x28>)
 800293e:	6223      	str	r3, [r4, #32]
 8002940:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <__sinit+0x2c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f5      	bne.n	8002934 <__sinit+0xc>
 8002948:	f7ff ffc4 	bl	80028d4 <global_stdio_init.part.0>
 800294c:	e7f2      	b.n	8002934 <__sinit+0xc>
 800294e:	bf00      	nop
 8002950:	08002895 	.word	0x08002895
 8002954:	20000228 	.word	0x20000228

08002958 <_fwalk_sglue>:
 8002958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800295c:	4607      	mov	r7, r0
 800295e:	4688      	mov	r8, r1
 8002960:	4614      	mov	r4, r2
 8002962:	2600      	movs	r6, #0
 8002964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002968:	f1b9 0901 	subs.w	r9, r9, #1
 800296c:	d505      	bpl.n	800297a <_fwalk_sglue+0x22>
 800296e:	6824      	ldr	r4, [r4, #0]
 8002970:	2c00      	cmp	r4, #0
 8002972:	d1f7      	bne.n	8002964 <_fwalk_sglue+0xc>
 8002974:	4630      	mov	r0, r6
 8002976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800297a:	89ab      	ldrh	r3, [r5, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d907      	bls.n	8002990 <_fwalk_sglue+0x38>
 8002980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002984:	3301      	adds	r3, #1
 8002986:	d003      	beq.n	8002990 <_fwalk_sglue+0x38>
 8002988:	4629      	mov	r1, r5
 800298a:	4638      	mov	r0, r7
 800298c:	47c0      	blx	r8
 800298e:	4306      	orrs	r6, r0
 8002990:	3568      	adds	r5, #104	@ 0x68
 8002992:	e7e9      	b.n	8002968 <_fwalk_sglue+0x10>

08002994 <iprintf>:
 8002994:	b40f      	push	{r0, r1, r2, r3}
 8002996:	b507      	push	{r0, r1, r2, lr}
 8002998:	4906      	ldr	r1, [pc, #24]	@ (80029b4 <iprintf+0x20>)
 800299a:	ab04      	add	r3, sp, #16
 800299c:	6808      	ldr	r0, [r1, #0]
 800299e:	f853 2b04 	ldr.w	r2, [r3], #4
 80029a2:	6881      	ldr	r1, [r0, #8]
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	f000 f875 	bl	8002a94 <_vfiprintf_r>
 80029aa:	b003      	add	sp, #12
 80029ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80029b0:	b004      	add	sp, #16
 80029b2:	4770      	bx	lr
 80029b4:	20000028 	.word	0x20000028

080029b8 <memcmp>:
 80029b8:	b510      	push	{r4, lr}
 80029ba:	3901      	subs	r1, #1
 80029bc:	4402      	add	r2, r0
 80029be:	4290      	cmp	r0, r2
 80029c0:	d101      	bne.n	80029c6 <memcmp+0xe>
 80029c2:	2000      	movs	r0, #0
 80029c4:	e005      	b.n	80029d2 <memcmp+0x1a>
 80029c6:	7803      	ldrb	r3, [r0, #0]
 80029c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80029cc:	42a3      	cmp	r3, r4
 80029ce:	d001      	beq.n	80029d4 <memcmp+0x1c>
 80029d0:	1b18      	subs	r0, r3, r4
 80029d2:	bd10      	pop	{r4, pc}
 80029d4:	3001      	adds	r0, #1
 80029d6:	e7f2      	b.n	80029be <memcmp+0x6>

080029d8 <memset>:
 80029d8:	4402      	add	r2, r0
 80029da:	4603      	mov	r3, r0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <memset+0xa>
 80029e0:	4770      	bx	lr
 80029e2:	f803 1b01 	strb.w	r1, [r3], #1
 80029e6:	e7f9      	b.n	80029dc <memset+0x4>

080029e8 <__errno>:
 80029e8:	4b01      	ldr	r3, [pc, #4]	@ (80029f0 <__errno+0x8>)
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000028 	.word	0x20000028

080029f4 <__libc_init_array>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	4d0d      	ldr	r5, [pc, #52]	@ (8002a2c <__libc_init_array+0x38>)
 80029f8:	4c0d      	ldr	r4, [pc, #52]	@ (8002a30 <__libc_init_array+0x3c>)
 80029fa:	1b64      	subs	r4, r4, r5
 80029fc:	10a4      	asrs	r4, r4, #2
 80029fe:	2600      	movs	r6, #0
 8002a00:	42a6      	cmp	r6, r4
 8002a02:	d109      	bne.n	8002a18 <__libc_init_array+0x24>
 8002a04:	4d0b      	ldr	r5, [pc, #44]	@ (8002a34 <__libc_init_array+0x40>)
 8002a06:	4c0c      	ldr	r4, [pc, #48]	@ (8002a38 <__libc_init_array+0x44>)
 8002a08:	f000 fe40 	bl	800368c <_init>
 8002a0c:	1b64      	subs	r4, r4, r5
 8002a0e:	10a4      	asrs	r4, r4, #2
 8002a10:	2600      	movs	r6, #0
 8002a12:	42a6      	cmp	r6, r4
 8002a14:	d105      	bne.n	8002a22 <__libc_init_array+0x2e>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1c:	4798      	blx	r3
 8002a1e:	3601      	adds	r6, #1
 8002a20:	e7ee      	b.n	8002a00 <__libc_init_array+0xc>
 8002a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a26:	4798      	blx	r3
 8002a28:	3601      	adds	r6, #1
 8002a2a:	e7f2      	b.n	8002a12 <__libc_init_array+0x1e>
 8002a2c:	08003764 	.word	0x08003764
 8002a30:	08003764 	.word	0x08003764
 8002a34:	08003764 	.word	0x08003764
 8002a38:	08003768 	.word	0x08003768

08002a3c <__retarget_lock_init_recursive>:
 8002a3c:	4770      	bx	lr

08002a3e <__retarget_lock_acquire_recursive>:
 8002a3e:	4770      	bx	lr

08002a40 <__retarget_lock_release_recursive>:
 8002a40:	4770      	bx	lr

08002a42 <__sfputc_r>:
 8002a42:	6893      	ldr	r3, [r2, #8]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	b410      	push	{r4}
 8002a4a:	6093      	str	r3, [r2, #8]
 8002a4c:	da08      	bge.n	8002a60 <__sfputc_r+0x1e>
 8002a4e:	6994      	ldr	r4, [r2, #24]
 8002a50:	42a3      	cmp	r3, r4
 8002a52:	db01      	blt.n	8002a58 <__sfputc_r+0x16>
 8002a54:	290a      	cmp	r1, #10
 8002a56:	d103      	bne.n	8002a60 <__sfputc_r+0x1e>
 8002a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a5c:	f000 bc5d 	b.w	800331a <__swbuf_r>
 8002a60:	6813      	ldr	r3, [r2, #0]
 8002a62:	1c58      	adds	r0, r3, #1
 8002a64:	6010      	str	r0, [r2, #0]
 8002a66:	7019      	strb	r1, [r3, #0]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <__sfputs_r>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	4606      	mov	r6, r0
 8002a74:	460f      	mov	r7, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	18d5      	adds	r5, r2, r3
 8002a7a:	42ac      	cmp	r4, r5
 8002a7c:	d101      	bne.n	8002a82 <__sfputs_r+0x12>
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e007      	b.n	8002a92 <__sfputs_r+0x22>
 8002a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a86:	463a      	mov	r2, r7
 8002a88:	4630      	mov	r0, r6
 8002a8a:	f7ff ffda 	bl	8002a42 <__sfputc_r>
 8002a8e:	1c43      	adds	r3, r0, #1
 8002a90:	d1f3      	bne.n	8002a7a <__sfputs_r+0xa>
 8002a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a94 <_vfiprintf_r>:
 8002a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a98:	460d      	mov	r5, r1
 8002a9a:	b09d      	sub	sp, #116	@ 0x74
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	4698      	mov	r8, r3
 8002aa0:	4606      	mov	r6, r0
 8002aa2:	b118      	cbz	r0, 8002aac <_vfiprintf_r+0x18>
 8002aa4:	6a03      	ldr	r3, [r0, #32]
 8002aa6:	b90b      	cbnz	r3, 8002aac <_vfiprintf_r+0x18>
 8002aa8:	f7ff ff3e 	bl	8002928 <__sinit>
 8002aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002aae:	07d9      	lsls	r1, r3, #31
 8002ab0:	d405      	bmi.n	8002abe <_vfiprintf_r+0x2a>
 8002ab2:	89ab      	ldrh	r3, [r5, #12]
 8002ab4:	059a      	lsls	r2, r3, #22
 8002ab6:	d402      	bmi.n	8002abe <_vfiprintf_r+0x2a>
 8002ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002aba:	f7ff ffc0 	bl	8002a3e <__retarget_lock_acquire_recursive>
 8002abe:	89ab      	ldrh	r3, [r5, #12]
 8002ac0:	071b      	lsls	r3, r3, #28
 8002ac2:	d501      	bpl.n	8002ac8 <_vfiprintf_r+0x34>
 8002ac4:	692b      	ldr	r3, [r5, #16]
 8002ac6:	b99b      	cbnz	r3, 8002af0 <_vfiprintf_r+0x5c>
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4630      	mov	r0, r6
 8002acc:	f000 fc64 	bl	8003398 <__swsetup_r>
 8002ad0:	b170      	cbz	r0, 8002af0 <_vfiprintf_r+0x5c>
 8002ad2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ad4:	07dc      	lsls	r4, r3, #31
 8002ad6:	d504      	bpl.n	8002ae2 <_vfiprintf_r+0x4e>
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002adc:	b01d      	add	sp, #116	@ 0x74
 8002ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae2:	89ab      	ldrh	r3, [r5, #12]
 8002ae4:	0598      	lsls	r0, r3, #22
 8002ae6:	d4f7      	bmi.n	8002ad8 <_vfiprintf_r+0x44>
 8002ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002aea:	f7ff ffa9 	bl	8002a40 <__retarget_lock_release_recursive>
 8002aee:	e7f3      	b.n	8002ad8 <_vfiprintf_r+0x44>
 8002af0:	2300      	movs	r3, #0
 8002af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002af4:	2320      	movs	r3, #32
 8002af6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8002afe:	2330      	movs	r3, #48	@ 0x30
 8002b00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002cb0 <_vfiprintf_r+0x21c>
 8002b04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b08:	f04f 0901 	mov.w	r9, #1
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	469a      	mov	sl, r3
 8002b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b14:	b10a      	cbz	r2, 8002b1a <_vfiprintf_r+0x86>
 8002b16:	2a25      	cmp	r2, #37	@ 0x25
 8002b18:	d1f9      	bne.n	8002b0e <_vfiprintf_r+0x7a>
 8002b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8002b1e:	d00b      	beq.n	8002b38 <_vfiprintf_r+0xa4>
 8002b20:	465b      	mov	r3, fp
 8002b22:	4622      	mov	r2, r4
 8002b24:	4629      	mov	r1, r5
 8002b26:	4630      	mov	r0, r6
 8002b28:	f7ff ffa2 	bl	8002a70 <__sfputs_r>
 8002b2c:	3001      	adds	r0, #1
 8002b2e:	f000 80a7 	beq.w	8002c80 <_vfiprintf_r+0x1ec>
 8002b32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b34:	445a      	add	r2, fp
 8002b36:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b38:	f89a 3000 	ldrb.w	r3, [sl]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 809f 	beq.w	8002c80 <_vfiprintf_r+0x1ec>
 8002b42:	2300      	movs	r3, #0
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b4c:	f10a 0a01 	add.w	sl, sl, #1
 8002b50:	9304      	str	r3, [sp, #16]
 8002b52:	9307      	str	r3, [sp, #28]
 8002b54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b58:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b5a:	4654      	mov	r4, sl
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b62:	4853      	ldr	r0, [pc, #332]	@ (8002cb0 <_vfiprintf_r+0x21c>)
 8002b64:	f7fd fb3c 	bl	80001e0 <memchr>
 8002b68:	9a04      	ldr	r2, [sp, #16]
 8002b6a:	b9d8      	cbnz	r0, 8002ba4 <_vfiprintf_r+0x110>
 8002b6c:	06d1      	lsls	r1, r2, #27
 8002b6e:	bf44      	itt	mi
 8002b70:	2320      	movmi	r3, #32
 8002b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b76:	0713      	lsls	r3, r2, #28
 8002b78:	bf44      	itt	mi
 8002b7a:	232b      	movmi	r3, #43	@ 0x2b
 8002b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b80:	f89a 3000 	ldrb.w	r3, [sl]
 8002b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b86:	d015      	beq.n	8002bb4 <_vfiprintf_r+0x120>
 8002b88:	9a07      	ldr	r2, [sp, #28]
 8002b8a:	4654      	mov	r4, sl
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f04f 0c0a 	mov.w	ip, #10
 8002b92:	4621      	mov	r1, r4
 8002b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b98:	3b30      	subs	r3, #48	@ 0x30
 8002b9a:	2b09      	cmp	r3, #9
 8002b9c:	d94b      	bls.n	8002c36 <_vfiprintf_r+0x1a2>
 8002b9e:	b1b0      	cbz	r0, 8002bce <_vfiprintf_r+0x13a>
 8002ba0:	9207      	str	r2, [sp, #28]
 8002ba2:	e014      	b.n	8002bce <_vfiprintf_r+0x13a>
 8002ba4:	eba0 0308 	sub.w	r3, r0, r8
 8002ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	9304      	str	r3, [sp, #16]
 8002bb0:	46a2      	mov	sl, r4
 8002bb2:	e7d2      	b.n	8002b5a <_vfiprintf_r+0xc6>
 8002bb4:	9b03      	ldr	r3, [sp, #12]
 8002bb6:	1d19      	adds	r1, r3, #4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	9103      	str	r1, [sp, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bfbb      	ittet	lt
 8002bc0:	425b      	neglt	r3, r3
 8002bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8002bc6:	9307      	strge	r3, [sp, #28]
 8002bc8:	9307      	strlt	r3, [sp, #28]
 8002bca:	bfb8      	it	lt
 8002bcc:	9204      	strlt	r2, [sp, #16]
 8002bce:	7823      	ldrb	r3, [r4, #0]
 8002bd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002bd2:	d10a      	bne.n	8002bea <_vfiprintf_r+0x156>
 8002bd4:	7863      	ldrb	r3, [r4, #1]
 8002bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bd8:	d132      	bne.n	8002c40 <_vfiprintf_r+0x1ac>
 8002bda:	9b03      	ldr	r3, [sp, #12]
 8002bdc:	1d1a      	adds	r2, r3, #4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	9203      	str	r2, [sp, #12]
 8002be2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002be6:	3402      	adds	r4, #2
 8002be8:	9305      	str	r3, [sp, #20]
 8002bea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002cc0 <_vfiprintf_r+0x22c>
 8002bee:	7821      	ldrb	r1, [r4, #0]
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	4650      	mov	r0, sl
 8002bf4:	f7fd faf4 	bl	80001e0 <memchr>
 8002bf8:	b138      	cbz	r0, 8002c0a <_vfiprintf_r+0x176>
 8002bfa:	9b04      	ldr	r3, [sp, #16]
 8002bfc:	eba0 000a 	sub.w	r0, r0, sl
 8002c00:	2240      	movs	r2, #64	@ 0x40
 8002c02:	4082      	lsls	r2, r0
 8002c04:	4313      	orrs	r3, r2
 8002c06:	3401      	adds	r4, #1
 8002c08:	9304      	str	r3, [sp, #16]
 8002c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c0e:	4829      	ldr	r0, [pc, #164]	@ (8002cb4 <_vfiprintf_r+0x220>)
 8002c10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c14:	2206      	movs	r2, #6
 8002c16:	f7fd fae3 	bl	80001e0 <memchr>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d03f      	beq.n	8002c9e <_vfiprintf_r+0x20a>
 8002c1e:	4b26      	ldr	r3, [pc, #152]	@ (8002cb8 <_vfiprintf_r+0x224>)
 8002c20:	bb1b      	cbnz	r3, 8002c6a <_vfiprintf_r+0x1d6>
 8002c22:	9b03      	ldr	r3, [sp, #12]
 8002c24:	3307      	adds	r3, #7
 8002c26:	f023 0307 	bic.w	r3, r3, #7
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	9303      	str	r3, [sp, #12]
 8002c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c30:	443b      	add	r3, r7
 8002c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c34:	e76a      	b.n	8002b0c <_vfiprintf_r+0x78>
 8002c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	e7a8      	b.n	8002b92 <_vfiprintf_r+0xfe>
 8002c40:	2300      	movs	r3, #0
 8002c42:	3401      	adds	r4, #1
 8002c44:	9305      	str	r3, [sp, #20]
 8002c46:	4619      	mov	r1, r3
 8002c48:	f04f 0c0a 	mov.w	ip, #10
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c52:	3a30      	subs	r2, #48	@ 0x30
 8002c54:	2a09      	cmp	r2, #9
 8002c56:	d903      	bls.n	8002c60 <_vfiprintf_r+0x1cc>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0c6      	beq.n	8002bea <_vfiprintf_r+0x156>
 8002c5c:	9105      	str	r1, [sp, #20]
 8002c5e:	e7c4      	b.n	8002bea <_vfiprintf_r+0x156>
 8002c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c64:	4604      	mov	r4, r0
 8002c66:	2301      	movs	r3, #1
 8002c68:	e7f0      	b.n	8002c4c <_vfiprintf_r+0x1b8>
 8002c6a:	ab03      	add	r3, sp, #12
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	462a      	mov	r2, r5
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <_vfiprintf_r+0x228>)
 8002c72:	a904      	add	r1, sp, #16
 8002c74:	4630      	mov	r0, r6
 8002c76:	f3af 8000 	nop.w
 8002c7a:	4607      	mov	r7, r0
 8002c7c:	1c78      	adds	r0, r7, #1
 8002c7e:	d1d6      	bne.n	8002c2e <_vfiprintf_r+0x19a>
 8002c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c82:	07d9      	lsls	r1, r3, #31
 8002c84:	d405      	bmi.n	8002c92 <_vfiprintf_r+0x1fe>
 8002c86:	89ab      	ldrh	r3, [r5, #12]
 8002c88:	059a      	lsls	r2, r3, #22
 8002c8a:	d402      	bmi.n	8002c92 <_vfiprintf_r+0x1fe>
 8002c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c8e:	f7ff fed7 	bl	8002a40 <__retarget_lock_release_recursive>
 8002c92:	89ab      	ldrh	r3, [r5, #12]
 8002c94:	065b      	lsls	r3, r3, #25
 8002c96:	f53f af1f 	bmi.w	8002ad8 <_vfiprintf_r+0x44>
 8002c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c9c:	e71e      	b.n	8002adc <_vfiprintf_r+0x48>
 8002c9e:	ab03      	add	r3, sp, #12
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	462a      	mov	r2, r5
 8002ca4:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <_vfiprintf_r+0x228>)
 8002ca6:	a904      	add	r1, sp, #16
 8002ca8:	4630      	mov	r0, r6
 8002caa:	f000 f91b 	bl	8002ee4 <_printf_i>
 8002cae:	e7e4      	b.n	8002c7a <_vfiprintf_r+0x1e6>
 8002cb0:	08003728 	.word	0x08003728
 8002cb4:	08003732 	.word	0x08003732
 8002cb8:	00000000 	.word	0x00000000
 8002cbc:	08002a71 	.word	0x08002a71
 8002cc0:	0800372e 	.word	0x0800372e

08002cc4 <sbrk_aligned>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8002d04 <sbrk_aligned+0x40>)
 8002cc8:	460c      	mov	r4, r1
 8002cca:	6831      	ldr	r1, [r6, #0]
 8002ccc:	4605      	mov	r5, r0
 8002cce:	b911      	cbnz	r1, 8002cd6 <sbrk_aligned+0x12>
 8002cd0:	f000 fc70 	bl	80035b4 <_sbrk_r>
 8002cd4:	6030      	str	r0, [r6, #0]
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f000 fc6b 	bl	80035b4 <_sbrk_r>
 8002cde:	1c43      	adds	r3, r0, #1
 8002ce0:	d103      	bne.n	8002cea <sbrk_aligned+0x26>
 8002ce2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
 8002cea:	1cc4      	adds	r4, r0, #3
 8002cec:	f024 0403 	bic.w	r4, r4, #3
 8002cf0:	42a0      	cmp	r0, r4
 8002cf2:	d0f8      	beq.n	8002ce6 <sbrk_aligned+0x22>
 8002cf4:	1a21      	subs	r1, r4, r0
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 fc5c 	bl	80035b4 <_sbrk_r>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d1f2      	bne.n	8002ce6 <sbrk_aligned+0x22>
 8002d00:	e7ef      	b.n	8002ce2 <sbrk_aligned+0x1e>
 8002d02:	bf00      	nop
 8002d04:	20000230 	.word	0x20000230

08002d08 <_malloc_r>:
 8002d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d0c:	1ccd      	adds	r5, r1, #3
 8002d0e:	f025 0503 	bic.w	r5, r5, #3
 8002d12:	3508      	adds	r5, #8
 8002d14:	2d0c      	cmp	r5, #12
 8002d16:	bf38      	it	cc
 8002d18:	250c      	movcc	r5, #12
 8002d1a:	2d00      	cmp	r5, #0
 8002d1c:	4606      	mov	r6, r0
 8002d1e:	db01      	blt.n	8002d24 <_malloc_r+0x1c>
 8002d20:	42a9      	cmp	r1, r5
 8002d22:	d904      	bls.n	8002d2e <_malloc_r+0x26>
 8002d24:	230c      	movs	r3, #12
 8002d26:	6033      	str	r3, [r6, #0]
 8002d28:	2000      	movs	r0, #0
 8002d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e04 <_malloc_r+0xfc>
 8002d32:	f000 faa3 	bl	800327c <__malloc_lock>
 8002d36:	f8d8 3000 	ldr.w	r3, [r8]
 8002d3a:	461c      	mov	r4, r3
 8002d3c:	bb44      	cbnz	r4, 8002d90 <_malloc_r+0x88>
 8002d3e:	4629      	mov	r1, r5
 8002d40:	4630      	mov	r0, r6
 8002d42:	f7ff ffbf 	bl	8002cc4 <sbrk_aligned>
 8002d46:	1c43      	adds	r3, r0, #1
 8002d48:	4604      	mov	r4, r0
 8002d4a:	d158      	bne.n	8002dfe <_malloc_r+0xf6>
 8002d4c:	f8d8 4000 	ldr.w	r4, [r8]
 8002d50:	4627      	mov	r7, r4
 8002d52:	2f00      	cmp	r7, #0
 8002d54:	d143      	bne.n	8002dde <_malloc_r+0xd6>
 8002d56:	2c00      	cmp	r4, #0
 8002d58:	d04b      	beq.n	8002df2 <_malloc_r+0xea>
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	4630      	mov	r0, r6
 8002d60:	eb04 0903 	add.w	r9, r4, r3
 8002d64:	f000 fc26 	bl	80035b4 <_sbrk_r>
 8002d68:	4581      	cmp	r9, r0
 8002d6a:	d142      	bne.n	8002df2 <_malloc_r+0xea>
 8002d6c:	6821      	ldr	r1, [r4, #0]
 8002d6e:	1a6d      	subs	r5, r5, r1
 8002d70:	4629      	mov	r1, r5
 8002d72:	4630      	mov	r0, r6
 8002d74:	f7ff ffa6 	bl	8002cc4 <sbrk_aligned>
 8002d78:	3001      	adds	r0, #1
 8002d7a:	d03a      	beq.n	8002df2 <_malloc_r+0xea>
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	442b      	add	r3, r5
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	f8d8 3000 	ldr.w	r3, [r8]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	bb62      	cbnz	r2, 8002de4 <_malloc_r+0xdc>
 8002d8a:	f8c8 7000 	str.w	r7, [r8]
 8002d8e:	e00f      	b.n	8002db0 <_malloc_r+0xa8>
 8002d90:	6822      	ldr	r2, [r4, #0]
 8002d92:	1b52      	subs	r2, r2, r5
 8002d94:	d420      	bmi.n	8002dd8 <_malloc_r+0xd0>
 8002d96:	2a0b      	cmp	r2, #11
 8002d98:	d917      	bls.n	8002dca <_malloc_r+0xc2>
 8002d9a:	1961      	adds	r1, r4, r5
 8002d9c:	42a3      	cmp	r3, r4
 8002d9e:	6025      	str	r5, [r4, #0]
 8002da0:	bf18      	it	ne
 8002da2:	6059      	strne	r1, [r3, #4]
 8002da4:	6863      	ldr	r3, [r4, #4]
 8002da6:	bf08      	it	eq
 8002da8:	f8c8 1000 	streq.w	r1, [r8]
 8002dac:	5162      	str	r2, [r4, r5]
 8002dae:	604b      	str	r3, [r1, #4]
 8002db0:	4630      	mov	r0, r6
 8002db2:	f000 fa69 	bl	8003288 <__malloc_unlock>
 8002db6:	f104 000b 	add.w	r0, r4, #11
 8002dba:	1d23      	adds	r3, r4, #4
 8002dbc:	f020 0007 	bic.w	r0, r0, #7
 8002dc0:	1ac2      	subs	r2, r0, r3
 8002dc2:	bf1c      	itt	ne
 8002dc4:	1a1b      	subne	r3, r3, r0
 8002dc6:	50a3      	strne	r3, [r4, r2]
 8002dc8:	e7af      	b.n	8002d2a <_malloc_r+0x22>
 8002dca:	6862      	ldr	r2, [r4, #4]
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	bf0c      	ite	eq
 8002dd0:	f8c8 2000 	streq.w	r2, [r8]
 8002dd4:	605a      	strne	r2, [r3, #4]
 8002dd6:	e7eb      	b.n	8002db0 <_malloc_r+0xa8>
 8002dd8:	4623      	mov	r3, r4
 8002dda:	6864      	ldr	r4, [r4, #4]
 8002ddc:	e7ae      	b.n	8002d3c <_malloc_r+0x34>
 8002dde:	463c      	mov	r4, r7
 8002de0:	687f      	ldr	r7, [r7, #4]
 8002de2:	e7b6      	b.n	8002d52 <_malloc_r+0x4a>
 8002de4:	461a      	mov	r2, r3
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	42a3      	cmp	r3, r4
 8002dea:	d1fb      	bne.n	8002de4 <_malloc_r+0xdc>
 8002dec:	2300      	movs	r3, #0
 8002dee:	6053      	str	r3, [r2, #4]
 8002df0:	e7de      	b.n	8002db0 <_malloc_r+0xa8>
 8002df2:	230c      	movs	r3, #12
 8002df4:	6033      	str	r3, [r6, #0]
 8002df6:	4630      	mov	r0, r6
 8002df8:	f000 fa46 	bl	8003288 <__malloc_unlock>
 8002dfc:	e794      	b.n	8002d28 <_malloc_r+0x20>
 8002dfe:	6005      	str	r5, [r0, #0]
 8002e00:	e7d6      	b.n	8002db0 <_malloc_r+0xa8>
 8002e02:	bf00      	nop
 8002e04:	20000234 	.word	0x20000234

08002e08 <_printf_common>:
 8002e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e0c:	4616      	mov	r6, r2
 8002e0e:	4698      	mov	r8, r3
 8002e10:	688a      	ldr	r2, [r1, #8]
 8002e12:	690b      	ldr	r3, [r1, #16]
 8002e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bfb8      	it	lt
 8002e1c:	4613      	movlt	r3, r2
 8002e1e:	6033      	str	r3, [r6, #0]
 8002e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e24:	4607      	mov	r7, r0
 8002e26:	460c      	mov	r4, r1
 8002e28:	b10a      	cbz	r2, 8002e2e <_printf_common+0x26>
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	6033      	str	r3, [r6, #0]
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	0699      	lsls	r1, r3, #26
 8002e32:	bf42      	ittt	mi
 8002e34:	6833      	ldrmi	r3, [r6, #0]
 8002e36:	3302      	addmi	r3, #2
 8002e38:	6033      	strmi	r3, [r6, #0]
 8002e3a:	6825      	ldr	r5, [r4, #0]
 8002e3c:	f015 0506 	ands.w	r5, r5, #6
 8002e40:	d106      	bne.n	8002e50 <_printf_common+0x48>
 8002e42:	f104 0a19 	add.w	sl, r4, #25
 8002e46:	68e3      	ldr	r3, [r4, #12]
 8002e48:	6832      	ldr	r2, [r6, #0]
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	42ab      	cmp	r3, r5
 8002e4e:	dc26      	bgt.n	8002e9e <_printf_common+0x96>
 8002e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e54:	6822      	ldr	r2, [r4, #0]
 8002e56:	3b00      	subs	r3, #0
 8002e58:	bf18      	it	ne
 8002e5a:	2301      	movne	r3, #1
 8002e5c:	0692      	lsls	r2, r2, #26
 8002e5e:	d42b      	bmi.n	8002eb8 <_printf_common+0xb0>
 8002e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002e64:	4641      	mov	r1, r8
 8002e66:	4638      	mov	r0, r7
 8002e68:	47c8      	blx	r9
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d01e      	beq.n	8002eac <_printf_common+0xa4>
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	6922      	ldr	r2, [r4, #16]
 8002e72:	f003 0306 	and.w	r3, r3, #6
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	bf02      	ittt	eq
 8002e7a:	68e5      	ldreq	r5, [r4, #12]
 8002e7c:	6833      	ldreq	r3, [r6, #0]
 8002e7e:	1aed      	subeq	r5, r5, r3
 8002e80:	68a3      	ldr	r3, [r4, #8]
 8002e82:	bf0c      	ite	eq
 8002e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e88:	2500      	movne	r5, #0
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	bfc4      	itt	gt
 8002e8e:	1a9b      	subgt	r3, r3, r2
 8002e90:	18ed      	addgt	r5, r5, r3
 8002e92:	2600      	movs	r6, #0
 8002e94:	341a      	adds	r4, #26
 8002e96:	42b5      	cmp	r5, r6
 8002e98:	d11a      	bne.n	8002ed0 <_printf_common+0xc8>
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	e008      	b.n	8002eb0 <_printf_common+0xa8>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	4652      	mov	r2, sl
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	47c8      	blx	r9
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	d103      	bne.n	8002eb4 <_printf_common+0xac>
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb4:	3501      	adds	r5, #1
 8002eb6:	e7c6      	b.n	8002e46 <_printf_common+0x3e>
 8002eb8:	18e1      	adds	r1, r4, r3
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	2030      	movs	r0, #48	@ 0x30
 8002ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ec2:	4422      	add	r2, r4
 8002ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ecc:	3302      	adds	r3, #2
 8002ece:	e7c7      	b.n	8002e60 <_printf_common+0x58>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	47c8      	blx	r9
 8002eda:	3001      	adds	r0, #1
 8002edc:	d0e6      	beq.n	8002eac <_printf_common+0xa4>
 8002ede:	3601      	adds	r6, #1
 8002ee0:	e7d9      	b.n	8002e96 <_printf_common+0x8e>
	...

08002ee4 <_printf_i>:
 8002ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee8:	7e0f      	ldrb	r7, [r1, #24]
 8002eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002eec:	2f78      	cmp	r7, #120	@ 0x78
 8002eee:	4691      	mov	r9, r2
 8002ef0:	4680      	mov	r8, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	469a      	mov	sl, r3
 8002ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002efa:	d807      	bhi.n	8002f0c <_printf_i+0x28>
 8002efc:	2f62      	cmp	r7, #98	@ 0x62
 8002efe:	d80a      	bhi.n	8002f16 <_printf_i+0x32>
 8002f00:	2f00      	cmp	r7, #0
 8002f02:	f000 80d2 	beq.w	80030aa <_printf_i+0x1c6>
 8002f06:	2f58      	cmp	r7, #88	@ 0x58
 8002f08:	f000 80b9 	beq.w	800307e <_printf_i+0x19a>
 8002f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f14:	e03a      	b.n	8002f8c <_printf_i+0xa8>
 8002f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f1a:	2b15      	cmp	r3, #21
 8002f1c:	d8f6      	bhi.n	8002f0c <_printf_i+0x28>
 8002f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8002f24 <_printf_i+0x40>)
 8002f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f24:	08002f7d 	.word	0x08002f7d
 8002f28:	08002f91 	.word	0x08002f91
 8002f2c:	08002f0d 	.word	0x08002f0d
 8002f30:	08002f0d 	.word	0x08002f0d
 8002f34:	08002f0d 	.word	0x08002f0d
 8002f38:	08002f0d 	.word	0x08002f0d
 8002f3c:	08002f91 	.word	0x08002f91
 8002f40:	08002f0d 	.word	0x08002f0d
 8002f44:	08002f0d 	.word	0x08002f0d
 8002f48:	08002f0d 	.word	0x08002f0d
 8002f4c:	08002f0d 	.word	0x08002f0d
 8002f50:	08003091 	.word	0x08003091
 8002f54:	08002fbb 	.word	0x08002fbb
 8002f58:	0800304b 	.word	0x0800304b
 8002f5c:	08002f0d 	.word	0x08002f0d
 8002f60:	08002f0d 	.word	0x08002f0d
 8002f64:	080030b3 	.word	0x080030b3
 8002f68:	08002f0d 	.word	0x08002f0d
 8002f6c:	08002fbb 	.word	0x08002fbb
 8002f70:	08002f0d 	.word	0x08002f0d
 8002f74:	08002f0d 	.word	0x08002f0d
 8002f78:	08003053 	.word	0x08003053
 8002f7c:	6833      	ldr	r3, [r6, #0]
 8002f7e:	1d1a      	adds	r2, r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6032      	str	r2, [r6, #0]
 8002f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e09d      	b.n	80030cc <_printf_i+0x1e8>
 8002f90:	6833      	ldr	r3, [r6, #0]
 8002f92:	6820      	ldr	r0, [r4, #0]
 8002f94:	1d19      	adds	r1, r3, #4
 8002f96:	6031      	str	r1, [r6, #0]
 8002f98:	0606      	lsls	r6, r0, #24
 8002f9a:	d501      	bpl.n	8002fa0 <_printf_i+0xbc>
 8002f9c:	681d      	ldr	r5, [r3, #0]
 8002f9e:	e003      	b.n	8002fa8 <_printf_i+0xc4>
 8002fa0:	0645      	lsls	r5, r0, #25
 8002fa2:	d5fb      	bpl.n	8002f9c <_printf_i+0xb8>
 8002fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002fa8:	2d00      	cmp	r5, #0
 8002faa:	da03      	bge.n	8002fb4 <_printf_i+0xd0>
 8002fac:	232d      	movs	r3, #45	@ 0x2d
 8002fae:	426d      	negs	r5, r5
 8002fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fb4:	4859      	ldr	r0, [pc, #356]	@ (800311c <_printf_i+0x238>)
 8002fb6:	230a      	movs	r3, #10
 8002fb8:	e011      	b.n	8002fde <_printf_i+0xfa>
 8002fba:	6821      	ldr	r1, [r4, #0]
 8002fbc:	6833      	ldr	r3, [r6, #0]
 8002fbe:	0608      	lsls	r0, r1, #24
 8002fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002fc4:	d402      	bmi.n	8002fcc <_printf_i+0xe8>
 8002fc6:	0649      	lsls	r1, r1, #25
 8002fc8:	bf48      	it	mi
 8002fca:	b2ad      	uxthmi	r5, r5
 8002fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8002fce:	4853      	ldr	r0, [pc, #332]	@ (800311c <_printf_i+0x238>)
 8002fd0:	6033      	str	r3, [r6, #0]
 8002fd2:	bf14      	ite	ne
 8002fd4:	230a      	movne	r3, #10
 8002fd6:	2308      	moveq	r3, #8
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002fde:	6866      	ldr	r6, [r4, #4]
 8002fe0:	60a6      	str	r6, [r4, #8]
 8002fe2:	2e00      	cmp	r6, #0
 8002fe4:	bfa2      	ittt	ge
 8002fe6:	6821      	ldrge	r1, [r4, #0]
 8002fe8:	f021 0104 	bicge.w	r1, r1, #4
 8002fec:	6021      	strge	r1, [r4, #0]
 8002fee:	b90d      	cbnz	r5, 8002ff4 <_printf_i+0x110>
 8002ff0:	2e00      	cmp	r6, #0
 8002ff2:	d04b      	beq.n	800308c <_printf_i+0x1a8>
 8002ff4:	4616      	mov	r6, r2
 8002ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8002ffe:	5dc7      	ldrb	r7, [r0, r7]
 8003000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003004:	462f      	mov	r7, r5
 8003006:	42bb      	cmp	r3, r7
 8003008:	460d      	mov	r5, r1
 800300a:	d9f4      	bls.n	8002ff6 <_printf_i+0x112>
 800300c:	2b08      	cmp	r3, #8
 800300e:	d10b      	bne.n	8003028 <_printf_i+0x144>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	07df      	lsls	r7, r3, #31
 8003014:	d508      	bpl.n	8003028 <_printf_i+0x144>
 8003016:	6923      	ldr	r3, [r4, #16]
 8003018:	6861      	ldr	r1, [r4, #4]
 800301a:	4299      	cmp	r1, r3
 800301c:	bfde      	ittt	le
 800301e:	2330      	movle	r3, #48	@ 0x30
 8003020:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003024:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003028:	1b92      	subs	r2, r2, r6
 800302a:	6122      	str	r2, [r4, #16]
 800302c:	f8cd a000 	str.w	sl, [sp]
 8003030:	464b      	mov	r3, r9
 8003032:	aa03      	add	r2, sp, #12
 8003034:	4621      	mov	r1, r4
 8003036:	4640      	mov	r0, r8
 8003038:	f7ff fee6 	bl	8002e08 <_printf_common>
 800303c:	3001      	adds	r0, #1
 800303e:	d14a      	bne.n	80030d6 <_printf_i+0x1f2>
 8003040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003044:	b004      	add	sp, #16
 8003046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	f043 0320 	orr.w	r3, r3, #32
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	4833      	ldr	r0, [pc, #204]	@ (8003120 <_printf_i+0x23c>)
 8003054:	2778      	movs	r7, #120	@ 0x78
 8003056:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	6831      	ldr	r1, [r6, #0]
 800305e:	061f      	lsls	r7, r3, #24
 8003060:	f851 5b04 	ldr.w	r5, [r1], #4
 8003064:	d402      	bmi.n	800306c <_printf_i+0x188>
 8003066:	065f      	lsls	r7, r3, #25
 8003068:	bf48      	it	mi
 800306a:	b2ad      	uxthmi	r5, r5
 800306c:	6031      	str	r1, [r6, #0]
 800306e:	07d9      	lsls	r1, r3, #31
 8003070:	bf44      	itt	mi
 8003072:	f043 0320 	orrmi.w	r3, r3, #32
 8003076:	6023      	strmi	r3, [r4, #0]
 8003078:	b11d      	cbz	r5, 8003082 <_printf_i+0x19e>
 800307a:	2310      	movs	r3, #16
 800307c:	e7ac      	b.n	8002fd8 <_printf_i+0xf4>
 800307e:	4827      	ldr	r0, [pc, #156]	@ (800311c <_printf_i+0x238>)
 8003080:	e7e9      	b.n	8003056 <_printf_i+0x172>
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	f023 0320 	bic.w	r3, r3, #32
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	e7f6      	b.n	800307a <_printf_i+0x196>
 800308c:	4616      	mov	r6, r2
 800308e:	e7bd      	b.n	800300c <_printf_i+0x128>
 8003090:	6833      	ldr	r3, [r6, #0]
 8003092:	6825      	ldr	r5, [r4, #0]
 8003094:	6961      	ldr	r1, [r4, #20]
 8003096:	1d18      	adds	r0, r3, #4
 8003098:	6030      	str	r0, [r6, #0]
 800309a:	062e      	lsls	r6, r5, #24
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	d501      	bpl.n	80030a4 <_printf_i+0x1c0>
 80030a0:	6019      	str	r1, [r3, #0]
 80030a2:	e002      	b.n	80030aa <_printf_i+0x1c6>
 80030a4:	0668      	lsls	r0, r5, #25
 80030a6:	d5fb      	bpl.n	80030a0 <_printf_i+0x1bc>
 80030a8:	8019      	strh	r1, [r3, #0]
 80030aa:	2300      	movs	r3, #0
 80030ac:	6123      	str	r3, [r4, #16]
 80030ae:	4616      	mov	r6, r2
 80030b0:	e7bc      	b.n	800302c <_printf_i+0x148>
 80030b2:	6833      	ldr	r3, [r6, #0]
 80030b4:	1d1a      	adds	r2, r3, #4
 80030b6:	6032      	str	r2, [r6, #0]
 80030b8:	681e      	ldr	r6, [r3, #0]
 80030ba:	6862      	ldr	r2, [r4, #4]
 80030bc:	2100      	movs	r1, #0
 80030be:	4630      	mov	r0, r6
 80030c0:	f7fd f88e 	bl	80001e0 <memchr>
 80030c4:	b108      	cbz	r0, 80030ca <_printf_i+0x1e6>
 80030c6:	1b80      	subs	r0, r0, r6
 80030c8:	6060      	str	r0, [r4, #4]
 80030ca:	6863      	ldr	r3, [r4, #4]
 80030cc:	6123      	str	r3, [r4, #16]
 80030ce:	2300      	movs	r3, #0
 80030d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030d4:	e7aa      	b.n	800302c <_printf_i+0x148>
 80030d6:	6923      	ldr	r3, [r4, #16]
 80030d8:	4632      	mov	r2, r6
 80030da:	4649      	mov	r1, r9
 80030dc:	4640      	mov	r0, r8
 80030de:	47d0      	blx	sl
 80030e0:	3001      	adds	r0, #1
 80030e2:	d0ad      	beq.n	8003040 <_printf_i+0x15c>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	079b      	lsls	r3, r3, #30
 80030e8:	d413      	bmi.n	8003112 <_printf_i+0x22e>
 80030ea:	68e0      	ldr	r0, [r4, #12]
 80030ec:	9b03      	ldr	r3, [sp, #12]
 80030ee:	4298      	cmp	r0, r3
 80030f0:	bfb8      	it	lt
 80030f2:	4618      	movlt	r0, r3
 80030f4:	e7a6      	b.n	8003044 <_printf_i+0x160>
 80030f6:	2301      	movs	r3, #1
 80030f8:	4632      	mov	r2, r6
 80030fa:	4649      	mov	r1, r9
 80030fc:	4640      	mov	r0, r8
 80030fe:	47d0      	blx	sl
 8003100:	3001      	adds	r0, #1
 8003102:	d09d      	beq.n	8003040 <_printf_i+0x15c>
 8003104:	3501      	adds	r5, #1
 8003106:	68e3      	ldr	r3, [r4, #12]
 8003108:	9903      	ldr	r1, [sp, #12]
 800310a:	1a5b      	subs	r3, r3, r1
 800310c:	42ab      	cmp	r3, r5
 800310e:	dcf2      	bgt.n	80030f6 <_printf_i+0x212>
 8003110:	e7eb      	b.n	80030ea <_printf_i+0x206>
 8003112:	2500      	movs	r5, #0
 8003114:	f104 0619 	add.w	r6, r4, #25
 8003118:	e7f5      	b.n	8003106 <_printf_i+0x222>
 800311a:	bf00      	nop
 800311c:	08003739 	.word	0x08003739
 8003120:	0800374a 	.word	0x0800374a

08003124 <__sflush_r>:
 8003124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800312c:	0716      	lsls	r6, r2, #28
 800312e:	4605      	mov	r5, r0
 8003130:	460c      	mov	r4, r1
 8003132:	d454      	bmi.n	80031de <__sflush_r+0xba>
 8003134:	684b      	ldr	r3, [r1, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	dc02      	bgt.n	8003140 <__sflush_r+0x1c>
 800313a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	dd48      	ble.n	80031d2 <__sflush_r+0xae>
 8003140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003142:	2e00      	cmp	r6, #0
 8003144:	d045      	beq.n	80031d2 <__sflush_r+0xae>
 8003146:	2300      	movs	r3, #0
 8003148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800314c:	682f      	ldr	r7, [r5, #0]
 800314e:	6a21      	ldr	r1, [r4, #32]
 8003150:	602b      	str	r3, [r5, #0]
 8003152:	d030      	beq.n	80031b6 <__sflush_r+0x92>
 8003154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003156:	89a3      	ldrh	r3, [r4, #12]
 8003158:	0759      	lsls	r1, r3, #29
 800315a:	d505      	bpl.n	8003168 <__sflush_r+0x44>
 800315c:	6863      	ldr	r3, [r4, #4]
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003162:	b10b      	cbz	r3, 8003168 <__sflush_r+0x44>
 8003164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	2300      	movs	r3, #0
 800316a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800316c:	6a21      	ldr	r1, [r4, #32]
 800316e:	4628      	mov	r0, r5
 8003170:	47b0      	blx	r6
 8003172:	1c43      	adds	r3, r0, #1
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	d106      	bne.n	8003186 <__sflush_r+0x62>
 8003178:	6829      	ldr	r1, [r5, #0]
 800317a:	291d      	cmp	r1, #29
 800317c:	d82b      	bhi.n	80031d6 <__sflush_r+0xb2>
 800317e:	4a2a      	ldr	r2, [pc, #168]	@ (8003228 <__sflush_r+0x104>)
 8003180:	410a      	asrs	r2, r1
 8003182:	07d6      	lsls	r6, r2, #31
 8003184:	d427      	bmi.n	80031d6 <__sflush_r+0xb2>
 8003186:	2200      	movs	r2, #0
 8003188:	6062      	str	r2, [r4, #4]
 800318a:	04d9      	lsls	r1, r3, #19
 800318c:	6922      	ldr	r2, [r4, #16]
 800318e:	6022      	str	r2, [r4, #0]
 8003190:	d504      	bpl.n	800319c <__sflush_r+0x78>
 8003192:	1c42      	adds	r2, r0, #1
 8003194:	d101      	bne.n	800319a <__sflush_r+0x76>
 8003196:	682b      	ldr	r3, [r5, #0]
 8003198:	b903      	cbnz	r3, 800319c <__sflush_r+0x78>
 800319a:	6560      	str	r0, [r4, #84]	@ 0x54
 800319c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800319e:	602f      	str	r7, [r5, #0]
 80031a0:	b1b9      	cbz	r1, 80031d2 <__sflush_r+0xae>
 80031a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031a6:	4299      	cmp	r1, r3
 80031a8:	d002      	beq.n	80031b0 <__sflush_r+0x8c>
 80031aa:	4628      	mov	r0, r5
 80031ac:	f000 fa24 	bl	80035f8 <_free_r>
 80031b0:	2300      	movs	r3, #0
 80031b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80031b4:	e00d      	b.n	80031d2 <__sflush_r+0xae>
 80031b6:	2301      	movs	r3, #1
 80031b8:	4628      	mov	r0, r5
 80031ba:	47b0      	blx	r6
 80031bc:	4602      	mov	r2, r0
 80031be:	1c50      	adds	r0, r2, #1
 80031c0:	d1c9      	bne.n	8003156 <__sflush_r+0x32>
 80031c2:	682b      	ldr	r3, [r5, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0c6      	beq.n	8003156 <__sflush_r+0x32>
 80031c8:	2b1d      	cmp	r3, #29
 80031ca:	d001      	beq.n	80031d0 <__sflush_r+0xac>
 80031cc:	2b16      	cmp	r3, #22
 80031ce:	d11e      	bne.n	800320e <__sflush_r+0xea>
 80031d0:	602f      	str	r7, [r5, #0]
 80031d2:	2000      	movs	r0, #0
 80031d4:	e022      	b.n	800321c <__sflush_r+0xf8>
 80031d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031da:	b21b      	sxth	r3, r3
 80031dc:	e01b      	b.n	8003216 <__sflush_r+0xf2>
 80031de:	690f      	ldr	r7, [r1, #16]
 80031e0:	2f00      	cmp	r7, #0
 80031e2:	d0f6      	beq.n	80031d2 <__sflush_r+0xae>
 80031e4:	0793      	lsls	r3, r2, #30
 80031e6:	680e      	ldr	r6, [r1, #0]
 80031e8:	bf08      	it	eq
 80031ea:	694b      	ldreq	r3, [r1, #20]
 80031ec:	600f      	str	r7, [r1, #0]
 80031ee:	bf18      	it	ne
 80031f0:	2300      	movne	r3, #0
 80031f2:	eba6 0807 	sub.w	r8, r6, r7
 80031f6:	608b      	str	r3, [r1, #8]
 80031f8:	f1b8 0f00 	cmp.w	r8, #0
 80031fc:	dde9      	ble.n	80031d2 <__sflush_r+0xae>
 80031fe:	6a21      	ldr	r1, [r4, #32]
 8003200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003202:	4643      	mov	r3, r8
 8003204:	463a      	mov	r2, r7
 8003206:	4628      	mov	r0, r5
 8003208:	47b0      	blx	r6
 800320a:	2800      	cmp	r0, #0
 800320c:	dc08      	bgt.n	8003220 <__sflush_r+0xfc>
 800320e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003216:	81a3      	strh	r3, [r4, #12]
 8003218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800321c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003220:	4407      	add	r7, r0
 8003222:	eba8 0800 	sub.w	r8, r8, r0
 8003226:	e7e7      	b.n	80031f8 <__sflush_r+0xd4>
 8003228:	dfbffffe 	.word	0xdfbffffe

0800322c <_fflush_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	690b      	ldr	r3, [r1, #16]
 8003230:	4605      	mov	r5, r0
 8003232:	460c      	mov	r4, r1
 8003234:	b913      	cbnz	r3, 800323c <_fflush_r+0x10>
 8003236:	2500      	movs	r5, #0
 8003238:	4628      	mov	r0, r5
 800323a:	bd38      	pop	{r3, r4, r5, pc}
 800323c:	b118      	cbz	r0, 8003246 <_fflush_r+0x1a>
 800323e:	6a03      	ldr	r3, [r0, #32]
 8003240:	b90b      	cbnz	r3, 8003246 <_fflush_r+0x1a>
 8003242:	f7ff fb71 	bl	8002928 <__sinit>
 8003246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f3      	beq.n	8003236 <_fflush_r+0xa>
 800324e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003250:	07d0      	lsls	r0, r2, #31
 8003252:	d404      	bmi.n	800325e <_fflush_r+0x32>
 8003254:	0599      	lsls	r1, r3, #22
 8003256:	d402      	bmi.n	800325e <_fflush_r+0x32>
 8003258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800325a:	f7ff fbf0 	bl	8002a3e <__retarget_lock_acquire_recursive>
 800325e:	4628      	mov	r0, r5
 8003260:	4621      	mov	r1, r4
 8003262:	f7ff ff5f 	bl	8003124 <__sflush_r>
 8003266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003268:	07da      	lsls	r2, r3, #31
 800326a:	4605      	mov	r5, r0
 800326c:	d4e4      	bmi.n	8003238 <_fflush_r+0xc>
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	059b      	lsls	r3, r3, #22
 8003272:	d4e1      	bmi.n	8003238 <_fflush_r+0xc>
 8003274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003276:	f7ff fbe3 	bl	8002a40 <__retarget_lock_release_recursive>
 800327a:	e7dd      	b.n	8003238 <_fflush_r+0xc>

0800327c <__malloc_lock>:
 800327c:	4801      	ldr	r0, [pc, #4]	@ (8003284 <__malloc_lock+0x8>)
 800327e:	f7ff bbde 	b.w	8002a3e <__retarget_lock_acquire_recursive>
 8003282:	bf00      	nop
 8003284:	2000022c 	.word	0x2000022c

08003288 <__malloc_unlock>:
 8003288:	4801      	ldr	r0, [pc, #4]	@ (8003290 <__malloc_unlock+0x8>)
 800328a:	f7ff bbd9 	b.w	8002a40 <__retarget_lock_release_recursive>
 800328e:	bf00      	nop
 8003290:	2000022c 	.word	0x2000022c

08003294 <__sread>:
 8003294:	b510      	push	{r4, lr}
 8003296:	460c      	mov	r4, r1
 8003298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800329c:	f000 f978 	bl	8003590 <_read_r>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	bfab      	itete	ge
 80032a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80032a6:	89a3      	ldrhlt	r3, [r4, #12]
 80032a8:	181b      	addge	r3, r3, r0
 80032aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80032ae:	bfac      	ite	ge
 80032b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80032b2:	81a3      	strhlt	r3, [r4, #12]
 80032b4:	bd10      	pop	{r4, pc}

080032b6 <__swrite>:
 80032b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ba:	461f      	mov	r7, r3
 80032bc:	898b      	ldrh	r3, [r1, #12]
 80032be:	05db      	lsls	r3, r3, #23
 80032c0:	4605      	mov	r5, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	4616      	mov	r6, r2
 80032c6:	d505      	bpl.n	80032d4 <__swrite+0x1e>
 80032c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032cc:	2302      	movs	r3, #2
 80032ce:	2200      	movs	r2, #0
 80032d0:	f000 f94c 	bl	800356c <_lseek_r>
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	4632      	mov	r2, r6
 80032e2:	463b      	mov	r3, r7
 80032e4:	4628      	mov	r0, r5
 80032e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032ea:	f000 b973 	b.w	80035d4 <_write_r>

080032ee <__sseek>:
 80032ee:	b510      	push	{r4, lr}
 80032f0:	460c      	mov	r4, r1
 80032f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f6:	f000 f939 	bl	800356c <_lseek_r>
 80032fa:	1c43      	adds	r3, r0, #1
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	bf15      	itete	ne
 8003300:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003302:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003306:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800330a:	81a3      	strheq	r3, [r4, #12]
 800330c:	bf18      	it	ne
 800330e:	81a3      	strhne	r3, [r4, #12]
 8003310:	bd10      	pop	{r4, pc}

08003312 <__sclose>:
 8003312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003316:	f000 b8f7 	b.w	8003508 <_close_r>

0800331a <__swbuf_r>:
 800331a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331c:	460e      	mov	r6, r1
 800331e:	4614      	mov	r4, r2
 8003320:	4605      	mov	r5, r0
 8003322:	b118      	cbz	r0, 800332c <__swbuf_r+0x12>
 8003324:	6a03      	ldr	r3, [r0, #32]
 8003326:	b90b      	cbnz	r3, 800332c <__swbuf_r+0x12>
 8003328:	f7ff fafe 	bl	8002928 <__sinit>
 800332c:	69a3      	ldr	r3, [r4, #24]
 800332e:	60a3      	str	r3, [r4, #8]
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	071a      	lsls	r2, r3, #28
 8003334:	d501      	bpl.n	800333a <__swbuf_r+0x20>
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	b943      	cbnz	r3, 800334c <__swbuf_r+0x32>
 800333a:	4621      	mov	r1, r4
 800333c:	4628      	mov	r0, r5
 800333e:	f000 f82b 	bl	8003398 <__swsetup_r>
 8003342:	b118      	cbz	r0, 800334c <__swbuf_r+0x32>
 8003344:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003348:	4638      	mov	r0, r7
 800334a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	6922      	ldr	r2, [r4, #16]
 8003350:	1a98      	subs	r0, r3, r2
 8003352:	6963      	ldr	r3, [r4, #20]
 8003354:	b2f6      	uxtb	r6, r6
 8003356:	4283      	cmp	r3, r0
 8003358:	4637      	mov	r7, r6
 800335a:	dc05      	bgt.n	8003368 <__swbuf_r+0x4e>
 800335c:	4621      	mov	r1, r4
 800335e:	4628      	mov	r0, r5
 8003360:	f7ff ff64 	bl	800322c <_fflush_r>
 8003364:	2800      	cmp	r0, #0
 8003366:	d1ed      	bne.n	8003344 <__swbuf_r+0x2a>
 8003368:	68a3      	ldr	r3, [r4, #8]
 800336a:	3b01      	subs	r3, #1
 800336c:	60a3      	str	r3, [r4, #8]
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	6022      	str	r2, [r4, #0]
 8003374:	701e      	strb	r6, [r3, #0]
 8003376:	6962      	ldr	r2, [r4, #20]
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	429a      	cmp	r2, r3
 800337c:	d004      	beq.n	8003388 <__swbuf_r+0x6e>
 800337e:	89a3      	ldrh	r3, [r4, #12]
 8003380:	07db      	lsls	r3, r3, #31
 8003382:	d5e1      	bpl.n	8003348 <__swbuf_r+0x2e>
 8003384:	2e0a      	cmp	r6, #10
 8003386:	d1df      	bne.n	8003348 <__swbuf_r+0x2e>
 8003388:	4621      	mov	r1, r4
 800338a:	4628      	mov	r0, r5
 800338c:	f7ff ff4e 	bl	800322c <_fflush_r>
 8003390:	2800      	cmp	r0, #0
 8003392:	d0d9      	beq.n	8003348 <__swbuf_r+0x2e>
 8003394:	e7d6      	b.n	8003344 <__swbuf_r+0x2a>
	...

08003398 <__swsetup_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <__swsetup_r+0xa8>)
 800339c:	4605      	mov	r5, r0
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	460c      	mov	r4, r1
 80033a2:	b118      	cbz	r0, 80033ac <__swsetup_r+0x14>
 80033a4:	6a03      	ldr	r3, [r0, #32]
 80033a6:	b90b      	cbnz	r3, 80033ac <__swsetup_r+0x14>
 80033a8:	f7ff fabe 	bl	8002928 <__sinit>
 80033ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033b0:	0719      	lsls	r1, r3, #28
 80033b2:	d422      	bmi.n	80033fa <__swsetup_r+0x62>
 80033b4:	06da      	lsls	r2, r3, #27
 80033b6:	d407      	bmi.n	80033c8 <__swsetup_r+0x30>
 80033b8:	2209      	movs	r2, #9
 80033ba:	602a      	str	r2, [r5, #0]
 80033bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033c0:	81a3      	strh	r3, [r4, #12]
 80033c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033c6:	e033      	b.n	8003430 <__swsetup_r+0x98>
 80033c8:	0758      	lsls	r0, r3, #29
 80033ca:	d512      	bpl.n	80033f2 <__swsetup_r+0x5a>
 80033cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033ce:	b141      	cbz	r1, 80033e2 <__swsetup_r+0x4a>
 80033d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033d4:	4299      	cmp	r1, r3
 80033d6:	d002      	beq.n	80033de <__swsetup_r+0x46>
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 f90d 	bl	80035f8 <_free_r>
 80033de:	2300      	movs	r3, #0
 80033e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	2300      	movs	r3, #0
 80033ec:	6063      	str	r3, [r4, #4]
 80033ee:	6923      	ldr	r3, [r4, #16]
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	b94b      	cbnz	r3, 8003412 <__swsetup_r+0x7a>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003408:	d003      	beq.n	8003412 <__swsetup_r+0x7a>
 800340a:	4621      	mov	r1, r4
 800340c:	4628      	mov	r0, r5
 800340e:	f000 f83f 	bl	8003490 <__smakebuf_r>
 8003412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003416:	f013 0201 	ands.w	r2, r3, #1
 800341a:	d00a      	beq.n	8003432 <__swsetup_r+0x9a>
 800341c:	2200      	movs	r2, #0
 800341e:	60a2      	str	r2, [r4, #8]
 8003420:	6962      	ldr	r2, [r4, #20]
 8003422:	4252      	negs	r2, r2
 8003424:	61a2      	str	r2, [r4, #24]
 8003426:	6922      	ldr	r2, [r4, #16]
 8003428:	b942      	cbnz	r2, 800343c <__swsetup_r+0xa4>
 800342a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800342e:	d1c5      	bne.n	80033bc <__swsetup_r+0x24>
 8003430:	bd38      	pop	{r3, r4, r5, pc}
 8003432:	0799      	lsls	r1, r3, #30
 8003434:	bf58      	it	pl
 8003436:	6962      	ldrpl	r2, [r4, #20]
 8003438:	60a2      	str	r2, [r4, #8]
 800343a:	e7f4      	b.n	8003426 <__swsetup_r+0x8e>
 800343c:	2000      	movs	r0, #0
 800343e:	e7f7      	b.n	8003430 <__swsetup_r+0x98>
 8003440:	20000028 	.word	0x20000028

08003444 <__swhatbuf_r>:
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	460c      	mov	r4, r1
 8003448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800344c:	2900      	cmp	r1, #0
 800344e:	b096      	sub	sp, #88	@ 0x58
 8003450:	4615      	mov	r5, r2
 8003452:	461e      	mov	r6, r3
 8003454:	da0d      	bge.n	8003472 <__swhatbuf_r+0x2e>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	bf14      	ite	ne
 8003462:	2340      	movne	r3, #64	@ 0x40
 8003464:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003468:	2000      	movs	r0, #0
 800346a:	6031      	str	r1, [r6, #0]
 800346c:	602b      	str	r3, [r5, #0]
 800346e:	b016      	add	sp, #88	@ 0x58
 8003470:	bd70      	pop	{r4, r5, r6, pc}
 8003472:	466a      	mov	r2, sp
 8003474:	f000 f858 	bl	8003528 <_fstat_r>
 8003478:	2800      	cmp	r0, #0
 800347a:	dbec      	blt.n	8003456 <__swhatbuf_r+0x12>
 800347c:	9901      	ldr	r1, [sp, #4]
 800347e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003482:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003486:	4259      	negs	r1, r3
 8003488:	4159      	adcs	r1, r3
 800348a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800348e:	e7eb      	b.n	8003468 <__swhatbuf_r+0x24>

08003490 <__smakebuf_r>:
 8003490:	898b      	ldrh	r3, [r1, #12]
 8003492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003494:	079d      	lsls	r5, r3, #30
 8003496:	4606      	mov	r6, r0
 8003498:	460c      	mov	r4, r1
 800349a:	d507      	bpl.n	80034ac <__smakebuf_r+0x1c>
 800349c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	6123      	str	r3, [r4, #16]
 80034a4:	2301      	movs	r3, #1
 80034a6:	6163      	str	r3, [r4, #20]
 80034a8:	b003      	add	sp, #12
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	ab01      	add	r3, sp, #4
 80034ae:	466a      	mov	r2, sp
 80034b0:	f7ff ffc8 	bl	8003444 <__swhatbuf_r>
 80034b4:	9f00      	ldr	r7, [sp, #0]
 80034b6:	4605      	mov	r5, r0
 80034b8:	4639      	mov	r1, r7
 80034ba:	4630      	mov	r0, r6
 80034bc:	f7ff fc24 	bl	8002d08 <_malloc_r>
 80034c0:	b948      	cbnz	r0, 80034d6 <__smakebuf_r+0x46>
 80034c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034c6:	059a      	lsls	r2, r3, #22
 80034c8:	d4ee      	bmi.n	80034a8 <__smakebuf_r+0x18>
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	f043 0302 	orr.w	r3, r3, #2
 80034d2:	81a3      	strh	r3, [r4, #12]
 80034d4:	e7e2      	b.n	800349c <__smakebuf_r+0xc>
 80034d6:	89a3      	ldrh	r3, [r4, #12]
 80034d8:	6020      	str	r0, [r4, #0]
 80034da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034de:	81a3      	strh	r3, [r4, #12]
 80034e0:	9b01      	ldr	r3, [sp, #4]
 80034e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80034e6:	b15b      	cbz	r3, 8003500 <__smakebuf_r+0x70>
 80034e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034ec:	4630      	mov	r0, r6
 80034ee:	f000 f82d 	bl	800354c <_isatty_r>
 80034f2:	b128      	cbz	r0, 8003500 <__smakebuf_r+0x70>
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	f023 0303 	bic.w	r3, r3, #3
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	81a3      	strh	r3, [r4, #12]
 8003500:	89a3      	ldrh	r3, [r4, #12]
 8003502:	431d      	orrs	r5, r3
 8003504:	81a5      	strh	r5, [r4, #12]
 8003506:	e7cf      	b.n	80034a8 <__smakebuf_r+0x18>

08003508 <_close_r>:
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	4d06      	ldr	r5, [pc, #24]	@ (8003524 <_close_r+0x1c>)
 800350c:	2300      	movs	r3, #0
 800350e:	4604      	mov	r4, r0
 8003510:	4608      	mov	r0, r1
 8003512:	602b      	str	r3, [r5, #0]
 8003514:	f7fd fc82 	bl	8000e1c <_close>
 8003518:	1c43      	adds	r3, r0, #1
 800351a:	d102      	bne.n	8003522 <_close_r+0x1a>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	b103      	cbz	r3, 8003522 <_close_r+0x1a>
 8003520:	6023      	str	r3, [r4, #0]
 8003522:	bd38      	pop	{r3, r4, r5, pc}
 8003524:	20000238 	.word	0x20000238

08003528 <_fstat_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4d07      	ldr	r5, [pc, #28]	@ (8003548 <_fstat_r+0x20>)
 800352c:	2300      	movs	r3, #0
 800352e:	4604      	mov	r4, r0
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	602b      	str	r3, [r5, #0]
 8003536:	f7fd fc7d 	bl	8000e34 <_fstat>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	d102      	bne.n	8003544 <_fstat_r+0x1c>
 800353e:	682b      	ldr	r3, [r5, #0]
 8003540:	b103      	cbz	r3, 8003544 <_fstat_r+0x1c>
 8003542:	6023      	str	r3, [r4, #0]
 8003544:	bd38      	pop	{r3, r4, r5, pc}
 8003546:	bf00      	nop
 8003548:	20000238 	.word	0x20000238

0800354c <_isatty_r>:
 800354c:	b538      	push	{r3, r4, r5, lr}
 800354e:	4d06      	ldr	r5, [pc, #24]	@ (8003568 <_isatty_r+0x1c>)
 8003550:	2300      	movs	r3, #0
 8003552:	4604      	mov	r4, r0
 8003554:	4608      	mov	r0, r1
 8003556:	602b      	str	r3, [r5, #0]
 8003558:	f7fd fc7c 	bl	8000e54 <_isatty>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d102      	bne.n	8003566 <_isatty_r+0x1a>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	b103      	cbz	r3, 8003566 <_isatty_r+0x1a>
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	20000238 	.word	0x20000238

0800356c <_lseek_r>:
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	4d07      	ldr	r5, [pc, #28]	@ (800358c <_lseek_r+0x20>)
 8003570:	4604      	mov	r4, r0
 8003572:	4608      	mov	r0, r1
 8003574:	4611      	mov	r1, r2
 8003576:	2200      	movs	r2, #0
 8003578:	602a      	str	r2, [r5, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	f7fd fc75 	bl	8000e6a <_lseek>
 8003580:	1c43      	adds	r3, r0, #1
 8003582:	d102      	bne.n	800358a <_lseek_r+0x1e>
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	b103      	cbz	r3, 800358a <_lseek_r+0x1e>
 8003588:	6023      	str	r3, [r4, #0]
 800358a:	bd38      	pop	{r3, r4, r5, pc}
 800358c:	20000238 	.word	0x20000238

08003590 <_read_r>:
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	4d07      	ldr	r5, [pc, #28]	@ (80035b0 <_read_r+0x20>)
 8003594:	4604      	mov	r4, r0
 8003596:	4608      	mov	r0, r1
 8003598:	4611      	mov	r1, r2
 800359a:	2200      	movs	r2, #0
 800359c:	602a      	str	r2, [r5, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	f7fd fc1f 	bl	8000de2 <_read>
 80035a4:	1c43      	adds	r3, r0, #1
 80035a6:	d102      	bne.n	80035ae <_read_r+0x1e>
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	b103      	cbz	r3, 80035ae <_read_r+0x1e>
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	bd38      	pop	{r3, r4, r5, pc}
 80035b0:	20000238 	.word	0x20000238

080035b4 <_sbrk_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4d06      	ldr	r5, [pc, #24]	@ (80035d0 <_sbrk_r+0x1c>)
 80035b8:	2300      	movs	r3, #0
 80035ba:	4604      	mov	r4, r0
 80035bc:	4608      	mov	r0, r1
 80035be:	602b      	str	r3, [r5, #0]
 80035c0:	f7fd fc60 	bl	8000e84 <_sbrk>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d102      	bne.n	80035ce <_sbrk_r+0x1a>
 80035c8:	682b      	ldr	r3, [r5, #0]
 80035ca:	b103      	cbz	r3, 80035ce <_sbrk_r+0x1a>
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	20000238 	.word	0x20000238

080035d4 <_write_r>:
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4d07      	ldr	r5, [pc, #28]	@ (80035f4 <_write_r+0x20>)
 80035d8:	4604      	mov	r4, r0
 80035da:	4608      	mov	r0, r1
 80035dc:	4611      	mov	r1, r2
 80035de:	2200      	movs	r2, #0
 80035e0:	602a      	str	r2, [r5, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f7fd fb3a 	bl	8000c5c <_write>
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d102      	bne.n	80035f2 <_write_r+0x1e>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	b103      	cbz	r3, 80035f2 <_write_r+0x1e>
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	20000238 	.word	0x20000238

080035f8 <_free_r>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	4605      	mov	r5, r0
 80035fc:	2900      	cmp	r1, #0
 80035fe:	d041      	beq.n	8003684 <_free_r+0x8c>
 8003600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003604:	1f0c      	subs	r4, r1, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	bfb8      	it	lt
 800360a:	18e4      	addlt	r4, r4, r3
 800360c:	f7ff fe36 	bl	800327c <__malloc_lock>
 8003610:	4a1d      	ldr	r2, [pc, #116]	@ (8003688 <_free_r+0x90>)
 8003612:	6813      	ldr	r3, [r2, #0]
 8003614:	b933      	cbnz	r3, 8003624 <_free_r+0x2c>
 8003616:	6063      	str	r3, [r4, #4]
 8003618:	6014      	str	r4, [r2, #0]
 800361a:	4628      	mov	r0, r5
 800361c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003620:	f7ff be32 	b.w	8003288 <__malloc_unlock>
 8003624:	42a3      	cmp	r3, r4
 8003626:	d908      	bls.n	800363a <_free_r+0x42>
 8003628:	6820      	ldr	r0, [r4, #0]
 800362a:	1821      	adds	r1, r4, r0
 800362c:	428b      	cmp	r3, r1
 800362e:	bf01      	itttt	eq
 8003630:	6819      	ldreq	r1, [r3, #0]
 8003632:	685b      	ldreq	r3, [r3, #4]
 8003634:	1809      	addeq	r1, r1, r0
 8003636:	6021      	streq	r1, [r4, #0]
 8003638:	e7ed      	b.n	8003616 <_free_r+0x1e>
 800363a:	461a      	mov	r2, r3
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	b10b      	cbz	r3, 8003644 <_free_r+0x4c>
 8003640:	42a3      	cmp	r3, r4
 8003642:	d9fa      	bls.n	800363a <_free_r+0x42>
 8003644:	6811      	ldr	r1, [r2, #0]
 8003646:	1850      	adds	r0, r2, r1
 8003648:	42a0      	cmp	r0, r4
 800364a:	d10b      	bne.n	8003664 <_free_r+0x6c>
 800364c:	6820      	ldr	r0, [r4, #0]
 800364e:	4401      	add	r1, r0
 8003650:	1850      	adds	r0, r2, r1
 8003652:	4283      	cmp	r3, r0
 8003654:	6011      	str	r1, [r2, #0]
 8003656:	d1e0      	bne.n	800361a <_free_r+0x22>
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	6053      	str	r3, [r2, #4]
 800365e:	4408      	add	r0, r1
 8003660:	6010      	str	r0, [r2, #0]
 8003662:	e7da      	b.n	800361a <_free_r+0x22>
 8003664:	d902      	bls.n	800366c <_free_r+0x74>
 8003666:	230c      	movs	r3, #12
 8003668:	602b      	str	r3, [r5, #0]
 800366a:	e7d6      	b.n	800361a <_free_r+0x22>
 800366c:	6820      	ldr	r0, [r4, #0]
 800366e:	1821      	adds	r1, r4, r0
 8003670:	428b      	cmp	r3, r1
 8003672:	bf04      	itt	eq
 8003674:	6819      	ldreq	r1, [r3, #0]
 8003676:	685b      	ldreq	r3, [r3, #4]
 8003678:	6063      	str	r3, [r4, #4]
 800367a:	bf04      	itt	eq
 800367c:	1809      	addeq	r1, r1, r0
 800367e:	6021      	streq	r1, [r4, #0]
 8003680:	6054      	str	r4, [r2, #4]
 8003682:	e7ca      	b.n	800361a <_free_r+0x22>
 8003684:	bd38      	pop	{r3, r4, r5, pc}
 8003686:	bf00      	nop
 8003688:	20000234 	.word	0x20000234

0800368c <_init>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr

08003698 <_fini>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr
